/*
 * Able API
 *
 * SDK for building integrations with Able.
 *
 * The version of the OpenAPI document: 1.20230621235520
 * Contact: support@able.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Able.Sdk.Client;
using Able.Sdk.Model;

namespace Able.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that will process the task.</param>
        /// <param name="properties"></param>
        /// <returns>V1AcquiredDocumentVersion</returns>
        V1AcquiredDocumentVersion APIAcquireDocumentVersion(string extensionId, string workerName, V1AcquireDocumentVersionRequestProperties properties);

        /// <summary>
        /// Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that will process the task.</param>
        /// <param name="properties"></param>
        /// <returns>ApiResponse of V1AcquiredDocumentVersion</returns>
        ApiResponse<V1AcquiredDocumentVersion> APIAcquireDocumentVersionWithHttpInfo(string extensionId, string workerName, V1AcquireDocumentVersionRequestProperties properties);
        /// <summary>
        /// Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that processed the task.</param>
        /// <param name="documentVersionId">The ID of the document version that was processed.</param>
        /// <param name="properties"></param>
        /// <returns>V1CompletedDocumentVersion</returns>
        V1CompletedDocumentVersion APICompleteDocumentVersion(string extensionId, string workerName, string documentVersionId, V1CompleteDocumentVersionRequestProperties properties);

        /// <summary>
        /// Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that processed the task.</param>
        /// <param name="documentVersionId">The ID of the document version that was processed.</param>
        /// <param name="properties"></param>
        /// <returns>ApiResponse of V1CompletedDocumentVersion</returns>
        ApiResponse<V1CompletedDocumentVersion> APICompleteDocumentVersionWithHttpInfo(string extensionId, string workerName, string documentVersionId, V1CompleteDocumentVersionRequestProperties properties);
        /// <summary>
        /// Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed.
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="body"></param>
        /// <returns>V1DocumentVersion</returns>
        V1DocumentVersion APICreateDocumentVersion(string extensionId, InlineObject body);

        /// <summary>
        /// Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of V1DocumentVersion</returns>
        ApiResponse<V1DocumentVersion> APICreateDocumentVersionWithHttpInfo(string extensionId, InlineObject body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that will process the task.</param>
        /// <param name="properties"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1AcquiredDocumentVersion</returns>
        System.Threading.Tasks.Task<V1AcquiredDocumentVersion> APIAcquireDocumentVersionAsync(string extensionId, string workerName, V1AcquireDocumentVersionRequestProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that will process the task.</param>
        /// <param name="properties"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1AcquiredDocumentVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1AcquiredDocumentVersion>> APIAcquireDocumentVersionWithHttpInfoAsync(string extensionId, string workerName, V1AcquireDocumentVersionRequestProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that processed the task.</param>
        /// <param name="documentVersionId">The ID of the document version that was processed.</param>
        /// <param name="properties"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1CompletedDocumentVersion</returns>
        System.Threading.Tasks.Task<V1CompletedDocumentVersion> APICompleteDocumentVersionAsync(string extensionId, string workerName, string documentVersionId, V1CompleteDocumentVersionRequestProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that processed the task.</param>
        /// <param name="documentVersionId">The ID of the document version that was processed.</param>
        /// <param name="properties"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1CompletedDocumentVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1CompletedDocumentVersion>> APICompleteDocumentVersionWithHttpInfoAsync(string extensionId, string workerName, string documentVersionId, V1CompleteDocumentVersionRequestProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1DocumentVersion</returns>
        System.Threading.Tasks.Task<V1DocumentVersion> APICreateDocumentVersionAsync(string extensionId, InlineObject body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1DocumentVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1DocumentVersion>> APICreateDocumentVersionWithHttpInfoAsync(string extensionId, InlineObject body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIApi : IAPIApiSync, IAPIApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class APIApi : IAPIApi
    {
        private Able.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="APIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public APIApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public APIApi(String basePath)
        {
            this.Configuration = Able.Sdk.Client.Configuration.MergeConfigurations(
                Able.Sdk.Client.GlobalConfiguration.Instance,
                new Able.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Able.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Able.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Able.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public APIApi(Able.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Able.Sdk.Client.Configuration.MergeConfigurations(
                Able.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Able.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Able.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Able.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public APIApi(Able.Sdk.Client.ISynchronousClient client, Able.Sdk.Client.IAsynchronousClient asyncClient, Able.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Able.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Able.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Able.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Able.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Able.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that will process the task.</param>
        /// <param name="properties"></param>
        /// <returns>V1AcquiredDocumentVersion</returns>
        public V1AcquiredDocumentVersion APIAcquireDocumentVersion(string extensionId, string workerName, V1AcquireDocumentVersionRequestProperties properties)
        {
            Able.Sdk.Client.ApiResponse<V1AcquiredDocumentVersion> localVarResponse = APIAcquireDocumentVersionWithHttpInfo(extensionId, workerName, properties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that will process the task.</param>
        /// <param name="properties"></param>
        /// <returns>ApiResponse of V1AcquiredDocumentVersion</returns>
        public Able.Sdk.Client.ApiResponse<V1AcquiredDocumentVersion> APIAcquireDocumentVersionWithHttpInfo(string extensionId, string workerName, V1AcquireDocumentVersionRequestProperties properties)
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'extensionId' when calling APIApi->APIAcquireDocumentVersion");

            // verify the required parameter 'workerName' is set
            if (workerName == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'workerName' when calling APIApi->APIAcquireDocumentVersion");

            // verify the required parameter 'properties' is set
            if (properties == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'properties' when calling APIApi->APIAcquireDocumentVersion");

            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("extensionId", Able.Sdk.Client.ClientUtils.ParameterToString(extensionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workerName", Able.Sdk.Client.ClientUtils.ParameterToString(workerName)); // path parameter
            localVarRequestOptions.Data = properties;


            // make the HTTP request
            var localVarResponse = this.Client.Put<V1AcquiredDocumentVersion>("/v1/extensions/{extensionId}/documentVersionQueue/{workerName}/acquire", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APIAcquireDocumentVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that will process the task.</param>
        /// <param name="properties"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1AcquiredDocumentVersion</returns>
        public async System.Threading.Tasks.Task<V1AcquiredDocumentVersion> APIAcquireDocumentVersionAsync(string extensionId, string workerName, V1AcquireDocumentVersionRequestProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Able.Sdk.Client.ApiResponse<V1AcquiredDocumentVersion> localVarResponse = await APIAcquireDocumentVersionWithHttpInfoAsync(extensionId, workerName, properties, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that will process the task.</param>
        /// <param name="properties"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1AcquiredDocumentVersion)</returns>
        public async System.Threading.Tasks.Task<Able.Sdk.Client.ApiResponse<V1AcquiredDocumentVersion>> APIAcquireDocumentVersionWithHttpInfoAsync(string extensionId, string workerName, V1AcquireDocumentVersionRequestProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'extensionId' when calling APIApi->APIAcquireDocumentVersion");

            // verify the required parameter 'workerName' is set
            if (workerName == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'workerName' when calling APIApi->APIAcquireDocumentVersion");

            // verify the required parameter 'properties' is set
            if (properties == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'properties' when calling APIApi->APIAcquireDocumentVersion");


            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("extensionId", Able.Sdk.Client.ClientUtils.ParameterToString(extensionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workerName", Able.Sdk.Client.ClientUtils.ParameterToString(workerName)); // path parameter
            localVarRequestOptions.Data = properties;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<V1AcquiredDocumentVersion>("/v1/extensions/{extensionId}/documentVersionQueue/{workerName}/acquire", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APIAcquireDocumentVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that processed the task.</param>
        /// <param name="documentVersionId">The ID of the document version that was processed.</param>
        /// <param name="properties"></param>
        /// <returns>V1CompletedDocumentVersion</returns>
        public V1CompletedDocumentVersion APICompleteDocumentVersion(string extensionId, string workerName, string documentVersionId, V1CompleteDocumentVersionRequestProperties properties)
        {
            Able.Sdk.Client.ApiResponse<V1CompletedDocumentVersion> localVarResponse = APICompleteDocumentVersionWithHttpInfo(extensionId, workerName, documentVersionId, properties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that processed the task.</param>
        /// <param name="documentVersionId">The ID of the document version that was processed.</param>
        /// <param name="properties"></param>
        /// <returns>ApiResponse of V1CompletedDocumentVersion</returns>
        public Able.Sdk.Client.ApiResponse<V1CompletedDocumentVersion> APICompleteDocumentVersionWithHttpInfo(string extensionId, string workerName, string documentVersionId, V1CompleteDocumentVersionRequestProperties properties)
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'extensionId' when calling APIApi->APICompleteDocumentVersion");

            // verify the required parameter 'workerName' is set
            if (workerName == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'workerName' when calling APIApi->APICompleteDocumentVersion");

            // verify the required parameter 'documentVersionId' is set
            if (documentVersionId == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'documentVersionId' when calling APIApi->APICompleteDocumentVersion");

            // verify the required parameter 'properties' is set
            if (properties == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'properties' when calling APIApi->APICompleteDocumentVersion");

            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("extensionId", Able.Sdk.Client.ClientUtils.ParameterToString(extensionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workerName", Able.Sdk.Client.ClientUtils.ParameterToString(workerName)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentVersionId", Able.Sdk.Client.ClientUtils.ParameterToString(documentVersionId)); // path parameter
            localVarRequestOptions.Data = properties;


            // make the HTTP request
            var localVarResponse = this.Client.Put<V1CompletedDocumentVersion>("/v1/extensions/{extensionId}/documentVersionQueue/{workerName}/complete/{documentVersionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APICompleteDocumentVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that processed the task.</param>
        /// <param name="documentVersionId">The ID of the document version that was processed.</param>
        /// <param name="properties"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1CompletedDocumentVersion</returns>
        public async System.Threading.Tasks.Task<V1CompletedDocumentVersion> APICompleteDocumentVersionAsync(string extensionId, string workerName, string documentVersionId, V1CompleteDocumentVersionRequestProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Able.Sdk.Client.ApiResponse<V1CompletedDocumentVersion> localVarResponse = await APICompleteDocumentVersionWithHttpInfoAsync(extensionId, workerName, documentVersionId, properties, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that processed the task.</param>
        /// <param name="documentVersionId">The ID of the document version that was processed.</param>
        /// <param name="properties"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1CompletedDocumentVersion)</returns>
        public async System.Threading.Tasks.Task<Able.Sdk.Client.ApiResponse<V1CompletedDocumentVersion>> APICompleteDocumentVersionWithHttpInfoAsync(string extensionId, string workerName, string documentVersionId, V1CompleteDocumentVersionRequestProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'extensionId' when calling APIApi->APICompleteDocumentVersion");

            // verify the required parameter 'workerName' is set
            if (workerName == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'workerName' when calling APIApi->APICompleteDocumentVersion");

            // verify the required parameter 'documentVersionId' is set
            if (documentVersionId == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'documentVersionId' when calling APIApi->APICompleteDocumentVersion");

            // verify the required parameter 'properties' is set
            if (properties == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'properties' when calling APIApi->APICompleteDocumentVersion");


            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("extensionId", Able.Sdk.Client.ClientUtils.ParameterToString(extensionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workerName", Able.Sdk.Client.ClientUtils.ParameterToString(workerName)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentVersionId", Able.Sdk.Client.ClientUtils.ParameterToString(documentVersionId)); // path parameter
            localVarRequestOptions.Data = properties;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<V1CompletedDocumentVersion>("/v1/extensions/{extensionId}/documentVersionQueue/{workerName}/complete/{documentVersionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APICompleteDocumentVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="body"></param>
        /// <returns>V1DocumentVersion</returns>
        public V1DocumentVersion APICreateDocumentVersion(string extensionId, InlineObject body)
        {
            Able.Sdk.Client.ApiResponse<V1DocumentVersion> localVarResponse = APICreateDocumentVersionWithHttpInfo(extensionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of V1DocumentVersion</returns>
        public Able.Sdk.Client.ApiResponse<V1DocumentVersion> APICreateDocumentVersionWithHttpInfo(string extensionId, InlineObject body)
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'extensionId' when calling APIApi->APICreateDocumentVersion");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling APIApi->APICreateDocumentVersion");

            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("extensionId", Able.Sdk.Client.ClientUtils.ParameterToString(extensionId)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<V1DocumentVersion>("/v1/extensions/{extensionId}/documentVersion", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APICreateDocumentVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1DocumentVersion</returns>
        public async System.Threading.Tasks.Task<V1DocumentVersion> APICreateDocumentVersionAsync(string extensionId, InlineObject body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Able.Sdk.Client.ApiResponse<V1DocumentVersion> localVarResponse = await APICreateDocumentVersionWithHttpInfoAsync(extensionId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1DocumentVersion)</returns>
        public async System.Threading.Tasks.Task<Able.Sdk.Client.ApiResponse<V1DocumentVersion>> APICreateDocumentVersionWithHttpInfoAsync(string extensionId, InlineObject body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'extensionId' when calling APIApi->APICreateDocumentVersion");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling APIApi->APICreateDocumentVersion");


            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("extensionId", Able.Sdk.Client.ClientUtils.ParameterToString(extensionId)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<V1DocumentVersion>("/v1/extensions/{extensionId}/documentVersion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APICreateDocumentVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
