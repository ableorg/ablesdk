/*
 * Able API
 *
 * SDK for building integrations with Able.
 *
 * API version: 1.20230628184958
 * Contact: support@able.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ablesdk

import (
	"encoding/json"
)

// V1Document Represents a document to be added to a DocumentContent.
type V1Document struct {
	// The primary key of the document in the external system.
	ExternalPrimaryKey *string `json:"externalPrimaryKey,omitempty"`
	// Attributes associated with the document.
	Attributes *[]V1Attribute `json:"attributes,omitempty"`
}

// NewV1Document instantiates a new V1Document object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Document() *V1Document {
	this := V1Document{}
	return &this
}

// NewV1DocumentWithDefaults instantiates a new V1Document object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DocumentWithDefaults() *V1Document {
	this := V1Document{}
	return &this
}

// GetExternalPrimaryKey returns the ExternalPrimaryKey field value if set, zero value otherwise.
func (o *V1Document) GetExternalPrimaryKey() string {
	if o == nil || o.ExternalPrimaryKey == nil {
		var ret string
		return ret
	}
	return *o.ExternalPrimaryKey
}

// GetExternalPrimaryKeyOk returns a tuple with the ExternalPrimaryKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Document) GetExternalPrimaryKeyOk() (*string, bool) {
	if o == nil || o.ExternalPrimaryKey == nil {
		return nil, false
	}
	return o.ExternalPrimaryKey, true
}

// HasExternalPrimaryKey returns a boolean if a field has been set.
func (o *V1Document) HasExternalPrimaryKey() bool {
	if o != nil && o.ExternalPrimaryKey != nil {
		return true
	}

	return false
}

// SetExternalPrimaryKey gets a reference to the given string and assigns it to the ExternalPrimaryKey field.
func (o *V1Document) SetExternalPrimaryKey(v string) {
	o.ExternalPrimaryKey = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *V1Document) GetAttributes() []V1Attribute {
	if o == nil || o.Attributes == nil {
		var ret []V1Attribute
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Document) GetAttributesOk() (*[]V1Attribute, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *V1Document) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []V1Attribute and assigns it to the Attributes field.
func (o *V1Document) SetAttributes(v []V1Attribute) {
	o.Attributes = &v
}

func (o V1Document) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExternalPrimaryKey != nil {
		toSerialize["externalPrimaryKey"] = o.ExternalPrimaryKey
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableV1Document struct {
	value *V1Document
	isSet bool
}

func (v NullableV1Document) Get() *V1Document {
	return v.value
}

func (v *NullableV1Document) Set(val *V1Document) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Document) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Document) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Document(val *V1Document) *NullableV1Document {
	return &NullableV1Document{value: val, isSet: true}
}

func (v NullableV1Document) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Document) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


