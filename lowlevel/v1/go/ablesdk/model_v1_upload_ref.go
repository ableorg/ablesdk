/*
 * Able API
 *
 * SDK for building integrations with Able.
 *
 * API version: 1.20230615090446
 * Contact: support@able.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ablesdk

import (
	"encoding/json"
)

// V1UploadRef Upload reference for files.
type V1UploadRef struct {
	// URL where the file contents should be PUT.
	UploadUrl string `json:"uploadUrl"`
}

// NewV1UploadRef instantiates a new V1UploadRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1UploadRef(uploadUrl string, ) *V1UploadRef {
	this := V1UploadRef{}
	this.UploadUrl = uploadUrl
	return &this
}

// NewV1UploadRefWithDefaults instantiates a new V1UploadRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1UploadRefWithDefaults() *V1UploadRef {
	this := V1UploadRef{}
	return &this
}

// GetUploadUrl returns the UploadUrl field value
func (o *V1UploadRef) GetUploadUrl() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.UploadUrl
}

// GetUploadUrlOk returns a tuple with the UploadUrl field value
// and a boolean to check if the value has been set.
func (o *V1UploadRef) GetUploadUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UploadUrl, true
}

// SetUploadUrl sets field value
func (o *V1UploadRef) SetUploadUrl(v string) {
	o.UploadUrl = v
}

func (o V1UploadRef) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uploadUrl"] = o.UploadUrl
	}
	return json.Marshal(toSerialize)
}

type NullableV1UploadRef struct {
	value *V1UploadRef
	isSet bool
}

func (v NullableV1UploadRef) Get() *V1UploadRef {
	return v.value
}

func (v *NullableV1UploadRef) Set(val *V1UploadRef) {
	v.value = val
	v.isSet = true
}

func (v NullableV1UploadRef) IsSet() bool {
	return v.isSet
}

func (v *NullableV1UploadRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1UploadRef(val *V1UploadRef) *NullableV1UploadRef {
	return &NullableV1UploadRef{value: val, isSet: true}
}

func (v NullableV1UploadRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1UploadRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


