<?php
/**
 * APIApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Able API
 *
 * SDK for building integrations with Able.
 *
 * The version of the OpenAPI document: 1.20230615090446
 * Contact: support@able.ai
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * APIApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class APIApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aPICreateRelationship
     *
     * Creates a new relationship.
     *
     * @param  string $parent The parent tenant resource name where this relationship will be created. Format: tenants/{tenant} (required)
     * @param  \OpenAPI\Client\Model\V1Relationship $relationship The relationship to create. (required)
     * @param  string $relationship_id The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1Relationship|\OpenAPI\Client\Model\RpcStatus
     */
    public function aPICreateRelationship($parent, $relationship, $relationship_id = null)
    {
        list($response) = $this->aPICreateRelationshipWithHttpInfo($parent, $relationship, $relationship_id);
        return $response;
    }

    /**
     * Operation aPICreateRelationshipWithHttpInfo
     *
     * Creates a new relationship.
     *
     * @param  string $parent The parent tenant resource name where this relationship will be created. Format: tenants/{tenant} (required)
     * @param  \OpenAPI\Client\Model\V1Relationship $relationship The relationship to create. (required)
     * @param  string $relationship_id The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1Relationship|\OpenAPI\Client\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function aPICreateRelationshipWithHttpInfo($parent, $relationship, $relationship_id = null)
    {
        $request = $this->aPICreateRelationshipRequest($parent, $relationship, $relationship_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\V1Relationship' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\V1Relationship', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\RpcStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\V1Relationship';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1Relationship',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation aPICreateRelationshipAsync
     *
     * Creates a new relationship.
     *
     * @param  string $parent The parent tenant resource name where this relationship will be created. Format: tenants/{tenant} (required)
     * @param  \OpenAPI\Client\Model\V1Relationship $relationship The relationship to create. (required)
     * @param  string $relationship_id The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aPICreateRelationshipAsync($parent, $relationship, $relationship_id = null)
    {
        return $this->aPICreateRelationshipAsyncWithHttpInfo($parent, $relationship, $relationship_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aPICreateRelationshipAsyncWithHttpInfo
     *
     * Creates a new relationship.
     *
     * @param  string $parent The parent tenant resource name where this relationship will be created. Format: tenants/{tenant} (required)
     * @param  \OpenAPI\Client\Model\V1Relationship $relationship The relationship to create. (required)
     * @param  string $relationship_id The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aPICreateRelationshipAsyncWithHttpInfo($parent, $relationship, $relationship_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\V1Relationship';
        $request = $this->aPICreateRelationshipRequest($parent, $relationship, $relationship_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aPICreateRelationship'
     *
     * @param  string $parent The parent tenant resource name where this relationship will be created. Format: tenants/{tenant} (required)
     * @param  \OpenAPI\Client\Model\V1Relationship $relationship The relationship to create. (required)
     * @param  string $relationship_id The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aPICreateRelationshipRequest($parent, $relationship, $relationship_id = null)
    {
        // verify the required parameter 'parent' is set
        if ($parent === null || (is_array($parent) && count($parent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent when calling aPICreateRelationship'
            );
        }
        if (!preg_match("/tenants\/[^\/]+/", $parent)) {
            throw new \InvalidArgumentException("invalid value for \"parent\" when calling APIApi.aPICreateRelationship, must conform to the pattern /tenants\/[^\/]+/.");
        }

        // verify the required parameter 'relationship' is set
        if ($relationship === null || (is_array($relationship) && count($relationship) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $relationship when calling aPICreateRelationship'
            );
        }

        $resourcePath = '/v1/{parent}/relationships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($relationship_id)) {
            $relationship_id = ObjectSerializer::serializeCollection($relationship_id, '', true);
        }
        if ($relationship_id !== null) {
            $queryParams['relationshipId'] = $relationship_id;
        }


        // path params
        if ($parent !== null) {
            $resourcePath = str_replace(
                '{' . 'parent' . '}',
                ObjectSerializer::toPathValue($parent),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($relationship)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($relationship));
            } else {
                $httpBody = $relationship;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aPICreateUpload
     *
     * Creates a new upload.
     *
     * @param  string $parent The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship} (required)
     * @param  \OpenAPI\Client\Model\V1Upload $upload The upload to create. (required)
     * @param  string $upload_id The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1Upload|\OpenAPI\Client\Model\RpcStatus
     */
    public function aPICreateUpload($parent, $upload, $upload_id = null)
    {
        list($response) = $this->aPICreateUploadWithHttpInfo($parent, $upload, $upload_id);
        return $response;
    }

    /**
     * Operation aPICreateUploadWithHttpInfo
     *
     * Creates a new upload.
     *
     * @param  string $parent The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship} (required)
     * @param  \OpenAPI\Client\Model\V1Upload $upload The upload to create. (required)
     * @param  string $upload_id The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1Upload|\OpenAPI\Client\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function aPICreateUploadWithHttpInfo($parent, $upload, $upload_id = null)
    {
        $request = $this->aPICreateUploadRequest($parent, $upload, $upload_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\V1Upload' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\V1Upload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\RpcStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\V1Upload';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1Upload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation aPICreateUploadAsync
     *
     * Creates a new upload.
     *
     * @param  string $parent The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship} (required)
     * @param  \OpenAPI\Client\Model\V1Upload $upload The upload to create. (required)
     * @param  string $upload_id The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aPICreateUploadAsync($parent, $upload, $upload_id = null)
    {
        return $this->aPICreateUploadAsyncWithHttpInfo($parent, $upload, $upload_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aPICreateUploadAsyncWithHttpInfo
     *
     * Creates a new upload.
     *
     * @param  string $parent The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship} (required)
     * @param  \OpenAPI\Client\Model\V1Upload $upload The upload to create. (required)
     * @param  string $upload_id The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aPICreateUploadAsyncWithHttpInfo($parent, $upload, $upload_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\V1Upload';
        $request = $this->aPICreateUploadRequest($parent, $upload, $upload_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aPICreateUpload'
     *
     * @param  string $parent The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship} (required)
     * @param  \OpenAPI\Client\Model\V1Upload $upload The upload to create. (required)
     * @param  string $upload_id The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aPICreateUploadRequest($parent, $upload, $upload_id = null)
    {
        // verify the required parameter 'parent' is set
        if ($parent === null || (is_array($parent) && count($parent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent when calling aPICreateUpload'
            );
        }
        if (!preg_match("/tenants\/[^\/]+\/relationships\/[^\/]+/", $parent)) {
            throw new \InvalidArgumentException("invalid value for \"parent\" when calling APIApi.aPICreateUpload, must conform to the pattern /tenants\/[^\/]+\/relationships\/[^\/]+/.");
        }

        // verify the required parameter 'upload' is set
        if ($upload === null || (is_array($upload) && count($upload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upload when calling aPICreateUpload'
            );
        }

        $resourcePath = '/v1/{parent}/uploads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($upload_id)) {
            $upload_id = ObjectSerializer::serializeCollection($upload_id, '', true);
        }
        if ($upload_id !== null) {
            $queryParams['uploadId'] = $upload_id;
        }


        // path params
        if ($parent !== null) {
            $resourcePath = str_replace(
                '{' . 'parent' . '}',
                ObjectSerializer::toPathValue($parent),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($upload)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($upload));
            } else {
                $httpBody = $upload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aPIStartUpload
     *
     * Creates an upload session to start uploading a file.
     *
     * @param  string $parent The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload} (required)
     * @param  object $body body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1UploadRef|\OpenAPI\Client\Model\RpcStatus
     */
    public function aPIStartUpload($parent, $body)
    {
        list($response) = $this->aPIStartUploadWithHttpInfo($parent, $body);
        return $response;
    }

    /**
     * Operation aPIStartUploadWithHttpInfo
     *
     * Creates an upload session to start uploading a file.
     *
     * @param  string $parent The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload} (required)
     * @param  object $body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1UploadRef|\OpenAPI\Client\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function aPIStartUploadWithHttpInfo($parent, $body)
    {
        $request = $this->aPIStartUploadRequest($parent, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\V1UploadRef' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\V1UploadRef', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\RpcStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\V1UploadRef';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1UploadRef',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation aPIStartUploadAsync
     *
     * Creates an upload session to start uploading a file.
     *
     * @param  string $parent The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload} (required)
     * @param  object $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aPIStartUploadAsync($parent, $body)
    {
        return $this->aPIStartUploadAsyncWithHttpInfo($parent, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aPIStartUploadAsyncWithHttpInfo
     *
     * Creates an upload session to start uploading a file.
     *
     * @param  string $parent The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload} (required)
     * @param  object $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aPIStartUploadAsyncWithHttpInfo($parent, $body)
    {
        $returnType = '\OpenAPI\Client\Model\V1UploadRef';
        $request = $this->aPIStartUploadRequest($parent, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aPIStartUpload'
     *
     * @param  string $parent The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload} (required)
     * @param  object $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aPIStartUploadRequest($parent, $body)
    {
        // verify the required parameter 'parent' is set
        if ($parent === null || (is_array($parent) && count($parent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent when calling aPIStartUpload'
            );
        }
        if (!preg_match("/tenants\/[^\/]+\/relationships\/[^\/]+\/uploads/", $parent)) {
            throw new \InvalidArgumentException("invalid value for \"parent\" when calling APIApi.aPIStartUpload, must conform to the pattern /tenants\/[^\/]+\/relationships\/[^\/]+\/uploads/.");
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling aPIStartUpload'
            );
        }

        $resourcePath = '/v1/{parent}:startUpload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($parent !== null) {
            $resourcePath = str_replace(
                '{' . 'parent' . '}',
                ObjectSerializer::toPathValue($parent),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
