/* tslint:disable */
/* eslint-disable */
/**
 * Able API
 * SDK for building integrations with Able.
 *
 * The version of the OpenAPI document: 1.20230615090446
 * Contact: support@able.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    RpcStatus,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1Relationship,
    V1RelationshipFromJSON,
    V1RelationshipToJSON,
    V1Upload,
    V1UploadFromJSON,
    V1UploadToJSON,
    V1UploadRef,
    V1UploadRefFromJSON,
    V1UploadRefToJSON,
} from '../models';

export interface APICreateRelationshipRequest {
    parent: string;
    relationship: V1Relationship;
    relationshipId?: string;
}

export interface APICreateUploadRequest {
    parent: string;
    upload: V1Upload;
    uploadId?: string;
}

export interface APIStartUploadRequest {
    parent: string;
    body: object;
}

/**
 * 
 */
export class APIApi extends runtime.BaseAPI {

    /**
     * Creates a new relationship.
     */
    async aPICreateRelationshipRaw(requestParameters: APICreateRelationshipRequest): Promise<runtime.ApiResponse<V1Relationship>> {
        if (requestParameters.parent === null || requestParameters.parent === undefined) {
            throw new runtime.RequiredError('parent','Required parameter requestParameters.parent was null or undefined when calling aPICreateRelationship.');
        }

        if (requestParameters.relationship === null || requestParameters.relationship === undefined) {
            throw new runtime.RequiredError('relationship','Required parameter requestParameters.relationship was null or undefined when calling aPICreateRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.relationshipId !== undefined) {
            queryParameters['relationshipId'] = requestParameters.relationshipId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/{parent}/relationships`.replace(`{${"parent"}}`, encodeURIComponent(String(requestParameters.parent))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1RelationshipToJSON(requestParameters.relationship),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1RelationshipFromJSON(jsonValue));
    }

    /**
     * Creates a new relationship.
     */
    async aPICreateRelationship(requestParameters: APICreateRelationshipRequest): Promise<V1Relationship> {
        const response = await this.aPICreateRelationshipRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new upload.
     */
    async aPICreateUploadRaw(requestParameters: APICreateUploadRequest): Promise<runtime.ApiResponse<V1Upload>> {
        if (requestParameters.parent === null || requestParameters.parent === undefined) {
            throw new runtime.RequiredError('parent','Required parameter requestParameters.parent was null or undefined when calling aPICreateUpload.');
        }

        if (requestParameters.upload === null || requestParameters.upload === undefined) {
            throw new runtime.RequiredError('upload','Required parameter requestParameters.upload was null or undefined when calling aPICreateUpload.');
        }

        const queryParameters: any = {};

        if (requestParameters.uploadId !== undefined) {
            queryParameters['uploadId'] = requestParameters.uploadId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/{parent}/uploads`.replace(`{${"parent"}}`, encodeURIComponent(String(requestParameters.parent))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1UploadToJSON(requestParameters.upload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1UploadFromJSON(jsonValue));
    }

    /**
     * Creates a new upload.
     */
    async aPICreateUpload(requestParameters: APICreateUploadRequest): Promise<V1Upload> {
        const response = await this.aPICreateUploadRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates an upload session to start uploading a file.
     */
    async aPIStartUploadRaw(requestParameters: APIStartUploadRequest): Promise<runtime.ApiResponse<V1UploadRef>> {
        if (requestParameters.parent === null || requestParameters.parent === undefined) {
            throw new runtime.RequiredError('parent','Required parameter requestParameters.parent was null or undefined when calling aPIStartUpload.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling aPIStartUpload.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/{parent}:startUpload`.replace(`{${"parent"}}`, encodeURIComponent(String(requestParameters.parent))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1UploadRefFromJSON(jsonValue));
    }

    /**
     * Creates an upload session to start uploading a file.
     */
    async aPIStartUpload(requestParameters: APIStartUploadRequest): Promise<V1UploadRef> {
        const response = await this.aPIStartUploadRaw(requestParameters);
        return await response.value();
    }

}
