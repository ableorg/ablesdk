=begin comment

Able API

SDK for building integrations with Able.

The version of the OpenAPI document: 1.20230615090446
Contact: support@able.ai
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package AbleSDK::APIApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use AbleSDK::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'AbleSDK::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = AbleSDK::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# a_pi_create_relationship
#
# Creates a new relationship.
# 
# @param string $parent The parent tenant resource name where this relationship will be created. Format: tenants/{tenant} (required)
# @param V1Relationship $relationship The relationship to create. (required)
# @param string $relationship_id The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
{
    my $params = {
    'parent' => {
        data_type => 'string',
        description => 'The parent tenant resource name where this relationship will be created. Format: tenants/{tenant}',
        required => '1',
    },
    'relationship' => {
        data_type => 'V1Relationship',
        description => 'The relationship to create.',
        required => '1',
    },
    'relationship_id' => {
        data_type => 'string',
        description => 'The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'a_pi_create_relationship' } = { 
        summary => 'Creates a new relationship.',
        params => $params,
        returns => 'V1Relationship',
        };
}
# @return V1Relationship
#
sub a_pi_create_relationship {
    my ($self, %args) = @_;

    # verify the required parameter 'parent' is set
    unless (exists $args{'parent'}) {
      croak("Missing the required parameter 'parent' when calling a_pi_create_relationship");
    }

    # verify the required parameter 'relationship' is set
    unless (exists $args{'relationship'}) {
      croak("Missing the required parameter 'relationship' when calling a_pi_create_relationship");
    }

    # parse inputs
    my $_resource_path = '/v1/{parent}/relationships';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'relationship_id'}) {
        $query_params->{'relationshipId'} = $self->{api_client}->to_query_value($args{'relationship_id'});
    }

    # path params
    if ( exists $args{'parent'}) {
        my $_base_variable = "{" . "parent" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'parent'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'relationship'}) {
        $_body_data = $args{'relationship'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Relationship', $response);
    return $_response_object;
}

#
# a_pi_create_upload
#
# Creates a new upload.
# 
# @param string $parent The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship} (required)
# @param V1Upload $upload The upload to create. (required)
# @param string $upload_id The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
{
    my $params = {
    'parent' => {
        data_type => 'string',
        description => 'The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship}',
        required => '1',
    },
    'upload' => {
        data_type => 'V1Upload',
        description => 'The upload to create.',
        required => '1',
    },
    'upload_id' => {
        data_type => 'string',
        description => 'The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'a_pi_create_upload' } = { 
        summary => 'Creates a new upload.',
        params => $params,
        returns => 'V1Upload',
        };
}
# @return V1Upload
#
sub a_pi_create_upload {
    my ($self, %args) = @_;

    # verify the required parameter 'parent' is set
    unless (exists $args{'parent'}) {
      croak("Missing the required parameter 'parent' when calling a_pi_create_upload");
    }

    # verify the required parameter 'upload' is set
    unless (exists $args{'upload'}) {
      croak("Missing the required parameter 'upload' when calling a_pi_create_upload");
    }

    # parse inputs
    my $_resource_path = '/v1/{parent}/uploads';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'upload_id'}) {
        $query_params->{'uploadId'} = $self->{api_client}->to_query_value($args{'upload_id'});
    }

    # path params
    if ( exists $args{'parent'}) {
        my $_base_variable = "{" . "parent" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'parent'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'upload'}) {
        $_body_data = $args{'upload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Upload', $response);
    return $_response_object;
}

#
# a_pi_start_upload
#
# Creates an upload session to start uploading a file.
# 
# @param string $parent The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload} (required)
# @param object $body  (required)
{
    my $params = {
    'parent' => {
        data_type => 'string',
        description => 'The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload}',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'a_pi_start_upload' } = { 
        summary => 'Creates an upload session to start uploading a file.',
        params => $params,
        returns => 'V1UploadRef',
        };
}
# @return V1UploadRef
#
sub a_pi_start_upload {
    my ($self, %args) = @_;

    # verify the required parameter 'parent' is set
    unless (exists $args{'parent'}) {
      croak("Missing the required parameter 'parent' when calling a_pi_start_upload");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling a_pi_start_upload");
    }

    # parse inputs
    my $_resource_path = '/v1/{parent}:startUpload';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'parent'}) {
        my $_base_variable = "{" . "parent" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'parent'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1UploadRef', $response);
    return $_response_object;
}

1;
