/*
 * Able API
 * SDK for building integrations with Able.
 *
 * The version of the OpenAPI document: 1.20230621235520
 * Contact: support@able.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ableai.api.sdk;

import com.ableai.api.ApiCallback;
import com.ableai.api.ApiClient;
import com.ableai.api.ApiException;
import com.ableai.api.ApiResponse;
import com.ableai.api.Configuration;
import com.ableai.api.Pair;
import com.ableai.api.ProgressRequestBody;
import com.ableai.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ableai.api.sdk.model.InlineObject;
import com.ableai.api.sdk.model.RpcStatus;
import com.ableai.api.sdk.model.V1AcquireDocumentVersionRequestProperties;
import com.ableai.api.sdk.model.V1AcquiredDocumentVersion;
import com.ableai.api.sdk.model.V1CompleteDocumentVersionRequestProperties;
import com.ableai.api.sdk.model.V1CompletedDocumentVersion;
import com.ableai.api.sdk.model.V1DocumentVersion;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiApi {
    private ApiClient localVarApiClient;

    public ApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for aPIAcquireDocumentVersion
     * @param extensionId The unique ID of the extension. (required)
     * @param workerName The name of the worker that will process the task. (required)
     * @param properties  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aPIAcquireDocumentVersionCall(String extensionId, String workerName, V1AcquireDocumentVersionRequestProperties properties, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = properties;

        // create path and map variables
        String localVarPath = "/v1/extensions/{extensionId}/documentVersionQueue/{workerName}/acquire"
            .replaceAll("\\{" + "extensionId" + "\\}", localVarApiClient.escapeString(extensionId.toString()))
            .replaceAll("\\{" + "workerName" + "\\}", localVarApiClient.escapeString(workerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aPIAcquireDocumentVersionValidateBeforeCall(String extensionId, String workerName, V1AcquireDocumentVersionRequestProperties properties, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling aPIAcquireDocumentVersion(Async)");
        }
        
        // verify the required parameter 'workerName' is set
        if (workerName == null) {
            throw new ApiException("Missing the required parameter 'workerName' when calling aPIAcquireDocumentVersion(Async)");
        }
        
        // verify the required parameter 'properties' is set
        if (properties == null) {
            throw new ApiException("Missing the required parameter 'properties' when calling aPIAcquireDocumentVersion(Async)");
        }
        

        okhttp3.Call localVarCall = aPIAcquireDocumentVersionCall(extensionId, workerName, properties, _callback);
        return localVarCall;

    }

    /**
     * Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
     * 
     * @param extensionId The unique ID of the extension. (required)
     * @param workerName The name of the worker that will process the task. (required)
     * @param properties  (required)
     * @return V1AcquiredDocumentVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1AcquiredDocumentVersion aPIAcquireDocumentVersion(String extensionId, String workerName, V1AcquireDocumentVersionRequestProperties properties) throws ApiException {
        ApiResponse<V1AcquiredDocumentVersion> localVarResp = aPIAcquireDocumentVersionWithHttpInfo(extensionId, workerName, properties);
        return localVarResp.getData();
    }

    /**
     * Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
     * 
     * @param extensionId The unique ID of the extension. (required)
     * @param workerName The name of the worker that will process the task. (required)
     * @param properties  (required)
     * @return ApiResponse&lt;V1AcquiredDocumentVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1AcquiredDocumentVersion> aPIAcquireDocumentVersionWithHttpInfo(String extensionId, String workerName, V1AcquireDocumentVersionRequestProperties properties) throws ApiException {
        okhttp3.Call localVarCall = aPIAcquireDocumentVersionValidateBeforeCall(extensionId, workerName, properties, null);
        Type localVarReturnType = new TypeToken<V1AcquiredDocumentVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers. (asynchronously)
     * 
     * @param extensionId The unique ID of the extension. (required)
     * @param workerName The name of the worker that will process the task. (required)
     * @param properties  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aPIAcquireDocumentVersionAsync(String extensionId, String workerName, V1AcquireDocumentVersionRequestProperties properties, final ApiCallback<V1AcquiredDocumentVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = aPIAcquireDocumentVersionValidateBeforeCall(extensionId, workerName, properties, _callback);
        Type localVarReturnType = new TypeToken<V1AcquiredDocumentVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aPICompleteDocumentVersion
     * @param extensionId The unique ID of the extension. (required)
     * @param workerName The name of the worker that processed the task. (required)
     * @param documentVersionId The ID of the document version that was processed. (required)
     * @param properties  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aPICompleteDocumentVersionCall(String extensionId, String workerName, String documentVersionId, V1CompleteDocumentVersionRequestProperties properties, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = properties;

        // create path and map variables
        String localVarPath = "/v1/extensions/{extensionId}/documentVersionQueue/{workerName}/complete/{documentVersionId}"
            .replaceAll("\\{" + "extensionId" + "\\}", localVarApiClient.escapeString(extensionId.toString()))
            .replaceAll("\\{" + "workerName" + "\\}", localVarApiClient.escapeString(workerName.toString()))
            .replaceAll("\\{" + "documentVersionId" + "\\}", localVarApiClient.escapeString(documentVersionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aPICompleteDocumentVersionValidateBeforeCall(String extensionId, String workerName, String documentVersionId, V1CompleteDocumentVersionRequestProperties properties, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling aPICompleteDocumentVersion(Async)");
        }
        
        // verify the required parameter 'workerName' is set
        if (workerName == null) {
            throw new ApiException("Missing the required parameter 'workerName' when calling aPICompleteDocumentVersion(Async)");
        }
        
        // verify the required parameter 'documentVersionId' is set
        if (documentVersionId == null) {
            throw new ApiException("Missing the required parameter 'documentVersionId' when calling aPICompleteDocumentVersion(Async)");
        }
        
        // verify the required parameter 'properties' is set
        if (properties == null) {
            throw new ApiException("Missing the required parameter 'properties' when calling aPICompleteDocumentVersion(Async)");
        }
        

        okhttp3.Call localVarCall = aPICompleteDocumentVersionCall(extensionId, workerName, documentVersionId, properties, _callback);
        return localVarCall;

    }

    /**
     * Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
     * 
     * @param extensionId The unique ID of the extension. (required)
     * @param workerName The name of the worker that processed the task. (required)
     * @param documentVersionId The ID of the document version that was processed. (required)
     * @param properties  (required)
     * @return V1CompletedDocumentVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1CompletedDocumentVersion aPICompleteDocumentVersion(String extensionId, String workerName, String documentVersionId, V1CompleteDocumentVersionRequestProperties properties) throws ApiException {
        ApiResponse<V1CompletedDocumentVersion> localVarResp = aPICompleteDocumentVersionWithHttpInfo(extensionId, workerName, documentVersionId, properties);
        return localVarResp.getData();
    }

    /**
     * Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
     * 
     * @param extensionId The unique ID of the extension. (required)
     * @param workerName The name of the worker that processed the task. (required)
     * @param documentVersionId The ID of the document version that was processed. (required)
     * @param properties  (required)
     * @return ApiResponse&lt;V1CompletedDocumentVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1CompletedDocumentVersion> aPICompleteDocumentVersionWithHttpInfo(String extensionId, String workerName, String documentVersionId, V1CompleteDocumentVersionRequestProperties properties) throws ApiException {
        okhttp3.Call localVarCall = aPICompleteDocumentVersionValidateBeforeCall(extensionId, workerName, documentVersionId, properties, null);
        Type localVarReturnType = new TypeToken<V1CompletedDocumentVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request. (asynchronously)
     * 
     * @param extensionId The unique ID of the extension. (required)
     * @param workerName The name of the worker that processed the task. (required)
     * @param documentVersionId The ID of the document version that was processed. (required)
     * @param properties  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aPICompleteDocumentVersionAsync(String extensionId, String workerName, String documentVersionId, V1CompleteDocumentVersionRequestProperties properties, final ApiCallback<V1CompletedDocumentVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = aPICompleteDocumentVersionValidateBeforeCall(extensionId, workerName, documentVersionId, properties, _callback);
        Type localVarReturnType = new TypeToken<V1CompletedDocumentVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aPICreateDocumentVersion
     * @param extensionId The unique ID of the extension. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aPICreateDocumentVersionCall(String extensionId, InlineObject body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/extensions/{extensionId}/documentVersion"
            .replaceAll("\\{" + "extensionId" + "\\}", localVarApiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aPICreateDocumentVersionValidateBeforeCall(String extensionId, InlineObject body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling aPICreateDocumentVersion(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling aPICreateDocumentVersion(Async)");
        }
        

        okhttp3.Call localVarCall = aPICreateDocumentVersionCall(extensionId, body, _callback);
        return localVarCall;

    }

    /**
     * Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed.
     * 
     * @param extensionId The unique ID of the extension. (required)
     * @param body  (required)
     * @return V1DocumentVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1DocumentVersion aPICreateDocumentVersion(String extensionId, InlineObject body) throws ApiException {
        ApiResponse<V1DocumentVersion> localVarResp = aPICreateDocumentVersionWithHttpInfo(extensionId, body);
        return localVarResp.getData();
    }

    /**
     * Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed.
     * 
     * @param extensionId The unique ID of the extension. (required)
     * @param body  (required)
     * @return ApiResponse&lt;V1DocumentVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1DocumentVersion> aPICreateDocumentVersionWithHttpInfo(String extensionId, InlineObject body) throws ApiException {
        okhttp3.Call localVarCall = aPICreateDocumentVersionValidateBeforeCall(extensionId, body, null);
        Type localVarReturnType = new TypeToken<V1DocumentVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed. (asynchronously)
     * 
     * @param extensionId The unique ID of the extension. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aPICreateDocumentVersionAsync(String extensionId, InlineObject body, final ApiCallback<V1DocumentVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = aPICreateDocumentVersionValidateBeforeCall(extensionId, body, _callback);
        Type localVarReturnType = new TypeToken<V1DocumentVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
