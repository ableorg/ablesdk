/* tslint:disable */
/* eslint-disable */
/**
 * Able API
 * SDK for building integrations with Able.
 *
 * The version of the OpenAPI document: 1.20230623221606
 * Contact: support@able.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    RpcStatus,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1AcquireDocumentContentRequestV1Body,
    V1AcquireDocumentContentRequestV1BodyFromJSON,
    V1AcquireDocumentContentRequestV1BodyToJSON,
    V1AcquiredDocumentContentV1,
    V1AcquiredDocumentContentV1FromJSON,
    V1AcquiredDocumentContentV1ToJSON,
    V1CompleteDocumentContentRequestV1Body,
    V1CompleteDocumentContentRequestV1BodyFromJSON,
    V1CompleteDocumentContentRequestV1BodyToJSON,
    V1CompletedDocumentContentV1,
    V1CompletedDocumentContentV1FromJSON,
    V1CompletedDocumentContentV1ToJSON,
    V1DocumentContent,
    V1DocumentContentFromJSON,
    V1DocumentContentToJSON,
} from '../models';

export interface APIAcquireDocumentContentV1Request {
    extensionId: string;
    workerName: string;
    body: V1AcquireDocumentContentRequestV1Body;
}

export interface APICompleteDocumentContentV1Request {
    extensionId: string;
    workerName: string;
    documentContentId: string;
    body: V1CompleteDocumentContentRequestV1Body;
}

export interface APICreateDocumentContentV1Request {
    extensionId: string;
    body: InlineObject;
}

/**
 * 
 */
export class APIApi extends runtime.BaseAPI {

    /**
     * Acquires a DocumentContent task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
     */
    async aPIAcquireDocumentContentV1Raw(requestParameters: APIAcquireDocumentContentV1Request): Promise<runtime.ApiResponse<V1AcquiredDocumentContentV1>> {
        if (requestParameters.extensionId === null || requestParameters.extensionId === undefined) {
            throw new runtime.RequiredError('extensionId','Required parameter requestParameters.extensionId was null or undefined when calling aPIAcquireDocumentContentV1.');
        }

        if (requestParameters.workerName === null || requestParameters.workerName === undefined) {
            throw new runtime.RequiredError('workerName','Required parameter requestParameters.workerName was null or undefined when calling aPIAcquireDocumentContentV1.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling aPIAcquireDocumentContentV1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/extensions/{extensionId}/documentContentQueue/{workerName}/acquire`.replace(`{${"extensionId"}}`, encodeURIComponent(String(requestParameters.extensionId))).replace(`{${"workerName"}}`, encodeURIComponent(String(requestParameters.workerName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1AcquireDocumentContentRequestV1BodyToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AcquiredDocumentContentV1FromJSON(jsonValue));
    }

    /**
     * Acquires a DocumentContent task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
     */
    async aPIAcquireDocumentContentV1(requestParameters: APIAcquireDocumentContentV1Request): Promise<V1AcquiredDocumentContentV1> {
        const response = await this.aPIAcquireDocumentContentV1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Completes a DocumentContent task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
     */
    async aPICompleteDocumentContentV1Raw(requestParameters: APICompleteDocumentContentV1Request): Promise<runtime.ApiResponse<V1CompletedDocumentContentV1>> {
        if (requestParameters.extensionId === null || requestParameters.extensionId === undefined) {
            throw new runtime.RequiredError('extensionId','Required parameter requestParameters.extensionId was null or undefined when calling aPICompleteDocumentContentV1.');
        }

        if (requestParameters.workerName === null || requestParameters.workerName === undefined) {
            throw new runtime.RequiredError('workerName','Required parameter requestParameters.workerName was null or undefined when calling aPICompleteDocumentContentV1.');
        }

        if (requestParameters.documentContentId === null || requestParameters.documentContentId === undefined) {
            throw new runtime.RequiredError('documentContentId','Required parameter requestParameters.documentContentId was null or undefined when calling aPICompleteDocumentContentV1.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling aPICompleteDocumentContentV1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/extensions/{extensionId}/documentContentQueue/{workerName}/complete/{documentContentId}`.replace(`{${"extensionId"}}`, encodeURIComponent(String(requestParameters.extensionId))).replace(`{${"workerName"}}`, encodeURIComponent(String(requestParameters.workerName))).replace(`{${"documentContentId"}}`, encodeURIComponent(String(requestParameters.documentContentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1CompleteDocumentContentRequestV1BodyToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CompletedDocumentContentV1FromJSON(jsonValue));
    }

    /**
     * Completes a DocumentContent task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
     */
    async aPICompleteDocumentContentV1(requestParameters: APICompleteDocumentContentV1Request): Promise<V1CompletedDocumentContentV1> {
        const response = await this.aPICompleteDocumentContentV1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new DocumentContent. The DocumentContent represents a document from an external system that needs to be processed.
     */
    async aPICreateDocumentContentV1Raw(requestParameters: APICreateDocumentContentV1Request): Promise<runtime.ApiResponse<V1DocumentContent>> {
        if (requestParameters.extensionId === null || requestParameters.extensionId === undefined) {
            throw new runtime.RequiredError('extensionId','Required parameter requestParameters.extensionId was null or undefined when calling aPICreateDocumentContentV1.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling aPICreateDocumentContentV1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/extensions/{extensionId}/documentContent`.replace(`{${"extensionId"}}`, encodeURIComponent(String(requestParameters.extensionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DocumentContentFromJSON(jsonValue));
    }

    /**
     * Creates a new DocumentContent. The DocumentContent represents a document from an external system that needs to be processed.
     */
    async aPICreateDocumentContentV1(requestParameters: APICreateDocumentContentV1Request): Promise<V1DocumentContent> {
        const response = await this.aPICreateDocumentContentV1Raw(requestParameters);
        return await response.value();
    }

}
