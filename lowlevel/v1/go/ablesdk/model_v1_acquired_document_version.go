/*
 * Able API
 *
 * SDK for building integrations with Able.
 *
 * API version: 1.20230621235520
 * Contact: support@able.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ablesdk

import (
	"encoding/json"
	"time"
)

// V1AcquiredDocumentVersion Represents a DocumentVersion that has been acquired for processing.
type V1AcquiredDocumentVersion struct {
	// The ID of the document version.
	DocumentVersionId *string `json:"documentVersionId,omitempty"`
	// The primary key of the document in the external system.
	ExternalPrimaryKey *string `json:"externalPrimaryKey,omitempty"`
	Direction *V1DataTransferDirection `json:"direction,omitempty"`
	// The upload URL for the document file in GCS.
	UploadUrl *string `json:"uploadUrl,omitempty"`
	// The download URL for the raw document file in GCS.
	RawFileUrl *string `json:"rawFileUrl,omitempty"`
	// The download URL for the standardized PDF file in GCS.
	StandardizedPdfUrl *string `json:"standardizedPdfUrl,omitempty"`
	// The download URL for the content file in GCS.
	ContentUrl *string `json:"contentUrl,omitempty"`
	// The name of the worker that acquired the document version.
	AcquiredBy *string `json:"acquiredBy,omitempty"`
	// The timestamp when the document version was acquired.
	AcquiredTime *time.Time `json:"acquiredTime,omitempty"`
	// The expected amount of time for task execution.
	AcquiredDuration *string `json:"acquiredDuration,omitempty"`
}

// NewV1AcquiredDocumentVersion instantiates a new V1AcquiredDocumentVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1AcquiredDocumentVersion() *V1AcquiredDocumentVersion {
	this := V1AcquiredDocumentVersion{}
	var direction V1DataTransferDirection = DATA_TRANSFER_DIRECTION_UNSPECIFIED
	this.Direction = &direction
	return &this
}

// NewV1AcquiredDocumentVersionWithDefaults instantiates a new V1AcquiredDocumentVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1AcquiredDocumentVersionWithDefaults() *V1AcquiredDocumentVersion {
	this := V1AcquiredDocumentVersion{}
	var direction V1DataTransferDirection = DATA_TRANSFER_DIRECTION_UNSPECIFIED
	this.Direction = &direction
	return &this
}

// GetDocumentVersionId returns the DocumentVersionId field value if set, zero value otherwise.
func (o *V1AcquiredDocumentVersion) GetDocumentVersionId() string {
	if o == nil || o.DocumentVersionId == nil {
		var ret string
		return ret
	}
	return *o.DocumentVersionId
}

// GetDocumentVersionIdOk returns a tuple with the DocumentVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AcquiredDocumentVersion) GetDocumentVersionIdOk() (*string, bool) {
	if o == nil || o.DocumentVersionId == nil {
		return nil, false
	}
	return o.DocumentVersionId, true
}

// HasDocumentVersionId returns a boolean if a field has been set.
func (o *V1AcquiredDocumentVersion) HasDocumentVersionId() bool {
	if o != nil && o.DocumentVersionId != nil {
		return true
	}

	return false
}

// SetDocumentVersionId gets a reference to the given string and assigns it to the DocumentVersionId field.
func (o *V1AcquiredDocumentVersion) SetDocumentVersionId(v string) {
	o.DocumentVersionId = &v
}

// GetExternalPrimaryKey returns the ExternalPrimaryKey field value if set, zero value otherwise.
func (o *V1AcquiredDocumentVersion) GetExternalPrimaryKey() string {
	if o == nil || o.ExternalPrimaryKey == nil {
		var ret string
		return ret
	}
	return *o.ExternalPrimaryKey
}

// GetExternalPrimaryKeyOk returns a tuple with the ExternalPrimaryKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AcquiredDocumentVersion) GetExternalPrimaryKeyOk() (*string, bool) {
	if o == nil || o.ExternalPrimaryKey == nil {
		return nil, false
	}
	return o.ExternalPrimaryKey, true
}

// HasExternalPrimaryKey returns a boolean if a field has been set.
func (o *V1AcquiredDocumentVersion) HasExternalPrimaryKey() bool {
	if o != nil && o.ExternalPrimaryKey != nil {
		return true
	}

	return false
}

// SetExternalPrimaryKey gets a reference to the given string and assigns it to the ExternalPrimaryKey field.
func (o *V1AcquiredDocumentVersion) SetExternalPrimaryKey(v string) {
	o.ExternalPrimaryKey = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *V1AcquiredDocumentVersion) GetDirection() V1DataTransferDirection {
	if o == nil || o.Direction == nil {
		var ret V1DataTransferDirection
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AcquiredDocumentVersion) GetDirectionOk() (*V1DataTransferDirection, bool) {
	if o == nil || o.Direction == nil {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *V1AcquiredDocumentVersion) HasDirection() bool {
	if o != nil && o.Direction != nil {
		return true
	}

	return false
}

// SetDirection gets a reference to the given V1DataTransferDirection and assigns it to the Direction field.
func (o *V1AcquiredDocumentVersion) SetDirection(v V1DataTransferDirection) {
	o.Direction = &v
}

// GetUploadUrl returns the UploadUrl field value if set, zero value otherwise.
func (o *V1AcquiredDocumentVersion) GetUploadUrl() string {
	if o == nil || o.UploadUrl == nil {
		var ret string
		return ret
	}
	return *o.UploadUrl
}

// GetUploadUrlOk returns a tuple with the UploadUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AcquiredDocumentVersion) GetUploadUrlOk() (*string, bool) {
	if o == nil || o.UploadUrl == nil {
		return nil, false
	}
	return o.UploadUrl, true
}

// HasUploadUrl returns a boolean if a field has been set.
func (o *V1AcquiredDocumentVersion) HasUploadUrl() bool {
	if o != nil && o.UploadUrl != nil {
		return true
	}

	return false
}

// SetUploadUrl gets a reference to the given string and assigns it to the UploadUrl field.
func (o *V1AcquiredDocumentVersion) SetUploadUrl(v string) {
	o.UploadUrl = &v
}

// GetRawFileUrl returns the RawFileUrl field value if set, zero value otherwise.
func (o *V1AcquiredDocumentVersion) GetRawFileUrl() string {
	if o == nil || o.RawFileUrl == nil {
		var ret string
		return ret
	}
	return *o.RawFileUrl
}

// GetRawFileUrlOk returns a tuple with the RawFileUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AcquiredDocumentVersion) GetRawFileUrlOk() (*string, bool) {
	if o == nil || o.RawFileUrl == nil {
		return nil, false
	}
	return o.RawFileUrl, true
}

// HasRawFileUrl returns a boolean if a field has been set.
func (o *V1AcquiredDocumentVersion) HasRawFileUrl() bool {
	if o != nil && o.RawFileUrl != nil {
		return true
	}

	return false
}

// SetRawFileUrl gets a reference to the given string and assigns it to the RawFileUrl field.
func (o *V1AcquiredDocumentVersion) SetRawFileUrl(v string) {
	o.RawFileUrl = &v
}

// GetStandardizedPdfUrl returns the StandardizedPdfUrl field value if set, zero value otherwise.
func (o *V1AcquiredDocumentVersion) GetStandardizedPdfUrl() string {
	if o == nil || o.StandardizedPdfUrl == nil {
		var ret string
		return ret
	}
	return *o.StandardizedPdfUrl
}

// GetStandardizedPdfUrlOk returns a tuple with the StandardizedPdfUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AcquiredDocumentVersion) GetStandardizedPdfUrlOk() (*string, bool) {
	if o == nil || o.StandardizedPdfUrl == nil {
		return nil, false
	}
	return o.StandardizedPdfUrl, true
}

// HasStandardizedPdfUrl returns a boolean if a field has been set.
func (o *V1AcquiredDocumentVersion) HasStandardizedPdfUrl() bool {
	if o != nil && o.StandardizedPdfUrl != nil {
		return true
	}

	return false
}

// SetStandardizedPdfUrl gets a reference to the given string and assigns it to the StandardizedPdfUrl field.
func (o *V1AcquiredDocumentVersion) SetStandardizedPdfUrl(v string) {
	o.StandardizedPdfUrl = &v
}

// GetContentUrl returns the ContentUrl field value if set, zero value otherwise.
func (o *V1AcquiredDocumentVersion) GetContentUrl() string {
	if o == nil || o.ContentUrl == nil {
		var ret string
		return ret
	}
	return *o.ContentUrl
}

// GetContentUrlOk returns a tuple with the ContentUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AcquiredDocumentVersion) GetContentUrlOk() (*string, bool) {
	if o == nil || o.ContentUrl == nil {
		return nil, false
	}
	return o.ContentUrl, true
}

// HasContentUrl returns a boolean if a field has been set.
func (o *V1AcquiredDocumentVersion) HasContentUrl() bool {
	if o != nil && o.ContentUrl != nil {
		return true
	}

	return false
}

// SetContentUrl gets a reference to the given string and assigns it to the ContentUrl field.
func (o *V1AcquiredDocumentVersion) SetContentUrl(v string) {
	o.ContentUrl = &v
}

// GetAcquiredBy returns the AcquiredBy field value if set, zero value otherwise.
func (o *V1AcquiredDocumentVersion) GetAcquiredBy() string {
	if o == nil || o.AcquiredBy == nil {
		var ret string
		return ret
	}
	return *o.AcquiredBy
}

// GetAcquiredByOk returns a tuple with the AcquiredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AcquiredDocumentVersion) GetAcquiredByOk() (*string, bool) {
	if o == nil || o.AcquiredBy == nil {
		return nil, false
	}
	return o.AcquiredBy, true
}

// HasAcquiredBy returns a boolean if a field has been set.
func (o *V1AcquiredDocumentVersion) HasAcquiredBy() bool {
	if o != nil && o.AcquiredBy != nil {
		return true
	}

	return false
}

// SetAcquiredBy gets a reference to the given string and assigns it to the AcquiredBy field.
func (o *V1AcquiredDocumentVersion) SetAcquiredBy(v string) {
	o.AcquiredBy = &v
}

// GetAcquiredTime returns the AcquiredTime field value if set, zero value otherwise.
func (o *V1AcquiredDocumentVersion) GetAcquiredTime() time.Time {
	if o == nil || o.AcquiredTime == nil {
		var ret time.Time
		return ret
	}
	return *o.AcquiredTime
}

// GetAcquiredTimeOk returns a tuple with the AcquiredTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AcquiredDocumentVersion) GetAcquiredTimeOk() (*time.Time, bool) {
	if o == nil || o.AcquiredTime == nil {
		return nil, false
	}
	return o.AcquiredTime, true
}

// HasAcquiredTime returns a boolean if a field has been set.
func (o *V1AcquiredDocumentVersion) HasAcquiredTime() bool {
	if o != nil && o.AcquiredTime != nil {
		return true
	}

	return false
}

// SetAcquiredTime gets a reference to the given time.Time and assigns it to the AcquiredTime field.
func (o *V1AcquiredDocumentVersion) SetAcquiredTime(v time.Time) {
	o.AcquiredTime = &v
}

// GetAcquiredDuration returns the AcquiredDuration field value if set, zero value otherwise.
func (o *V1AcquiredDocumentVersion) GetAcquiredDuration() string {
	if o == nil || o.AcquiredDuration == nil {
		var ret string
		return ret
	}
	return *o.AcquiredDuration
}

// GetAcquiredDurationOk returns a tuple with the AcquiredDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AcquiredDocumentVersion) GetAcquiredDurationOk() (*string, bool) {
	if o == nil || o.AcquiredDuration == nil {
		return nil, false
	}
	return o.AcquiredDuration, true
}

// HasAcquiredDuration returns a boolean if a field has been set.
func (o *V1AcquiredDocumentVersion) HasAcquiredDuration() bool {
	if o != nil && o.AcquiredDuration != nil {
		return true
	}

	return false
}

// SetAcquiredDuration gets a reference to the given string and assigns it to the AcquiredDuration field.
func (o *V1AcquiredDocumentVersion) SetAcquiredDuration(v string) {
	o.AcquiredDuration = &v
}

func (o V1AcquiredDocumentVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DocumentVersionId != nil {
		toSerialize["documentVersionId"] = o.DocumentVersionId
	}
	if o.ExternalPrimaryKey != nil {
		toSerialize["externalPrimaryKey"] = o.ExternalPrimaryKey
	}
	if o.Direction != nil {
		toSerialize["direction"] = o.Direction
	}
	if o.UploadUrl != nil {
		toSerialize["uploadUrl"] = o.UploadUrl
	}
	if o.RawFileUrl != nil {
		toSerialize["rawFileUrl"] = o.RawFileUrl
	}
	if o.StandardizedPdfUrl != nil {
		toSerialize["standardizedPdfUrl"] = o.StandardizedPdfUrl
	}
	if o.ContentUrl != nil {
		toSerialize["contentUrl"] = o.ContentUrl
	}
	if o.AcquiredBy != nil {
		toSerialize["acquiredBy"] = o.AcquiredBy
	}
	if o.AcquiredTime != nil {
		toSerialize["acquiredTime"] = o.AcquiredTime
	}
	if o.AcquiredDuration != nil {
		toSerialize["acquiredDuration"] = o.AcquiredDuration
	}
	return json.Marshal(toSerialize)
}

type NullableV1AcquiredDocumentVersion struct {
	value *V1AcquiredDocumentVersion
	isSet bool
}

func (v NullableV1AcquiredDocumentVersion) Get() *V1AcquiredDocumentVersion {
	return v.value
}

func (v *NullableV1AcquiredDocumentVersion) Set(val *V1AcquiredDocumentVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableV1AcquiredDocumentVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableV1AcquiredDocumentVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1AcquiredDocumentVersion(val *V1AcquiredDocumentVersion) *NullableV1AcquiredDocumentVersion {
	return &NullableV1AcquiredDocumentVersion{value: val, isSet: true}
}

func (v NullableV1AcquiredDocumentVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1AcquiredDocumentVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


