<?php
/**
 * APIApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Able API
 *
 * SDK for building integrations with Able.
 *
 * The version of the OpenAPI document: 1.20230621235520
 * Contact: support@able.ai
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * APIApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class APIApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aPIAcquireDocumentVersion
     *
     * Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
     *
     * @param  string $extension_id The unique ID of the extension. (required)
     * @param  string $worker_name The name of the worker that will process the task. (required)
     * @param  \OpenAPI\Client\Model\V1AcquireDocumentVersionRequestProperties $properties properties (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1AcquiredDocumentVersion|\OpenAPI\Client\Model\RpcStatus
     */
    public function aPIAcquireDocumentVersion($extension_id, $worker_name, $properties)
    {
        list($response) = $this->aPIAcquireDocumentVersionWithHttpInfo($extension_id, $worker_name, $properties);
        return $response;
    }

    /**
     * Operation aPIAcquireDocumentVersionWithHttpInfo
     *
     * Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
     *
     * @param  string $extension_id The unique ID of the extension. (required)
     * @param  string $worker_name The name of the worker that will process the task. (required)
     * @param  \OpenAPI\Client\Model\V1AcquireDocumentVersionRequestProperties $properties (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1AcquiredDocumentVersion|\OpenAPI\Client\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function aPIAcquireDocumentVersionWithHttpInfo($extension_id, $worker_name, $properties)
    {
        $request = $this->aPIAcquireDocumentVersionRequest($extension_id, $worker_name, $properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\V1AcquiredDocumentVersion' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\V1AcquiredDocumentVersion', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\RpcStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\V1AcquiredDocumentVersion';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1AcquiredDocumentVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation aPIAcquireDocumentVersionAsync
     *
     * Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
     *
     * @param  string $extension_id The unique ID of the extension. (required)
     * @param  string $worker_name The name of the worker that will process the task. (required)
     * @param  \OpenAPI\Client\Model\V1AcquireDocumentVersionRequestProperties $properties (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aPIAcquireDocumentVersionAsync($extension_id, $worker_name, $properties)
    {
        return $this->aPIAcquireDocumentVersionAsyncWithHttpInfo($extension_id, $worker_name, $properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aPIAcquireDocumentVersionAsyncWithHttpInfo
     *
     * Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
     *
     * @param  string $extension_id The unique ID of the extension. (required)
     * @param  string $worker_name The name of the worker that will process the task. (required)
     * @param  \OpenAPI\Client\Model\V1AcquireDocumentVersionRequestProperties $properties (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aPIAcquireDocumentVersionAsyncWithHttpInfo($extension_id, $worker_name, $properties)
    {
        $returnType = '\OpenAPI\Client\Model\V1AcquiredDocumentVersion';
        $request = $this->aPIAcquireDocumentVersionRequest($extension_id, $worker_name, $properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aPIAcquireDocumentVersion'
     *
     * @param  string $extension_id The unique ID of the extension. (required)
     * @param  string $worker_name The name of the worker that will process the task. (required)
     * @param  \OpenAPI\Client\Model\V1AcquireDocumentVersionRequestProperties $properties (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aPIAcquireDocumentVersionRequest($extension_id, $worker_name, $properties)
    {
        // verify the required parameter 'extension_id' is set
        if ($extension_id === null || (is_array($extension_id) && count($extension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extension_id when calling aPIAcquireDocumentVersion'
            );
        }
        // verify the required parameter 'worker_name' is set
        if ($worker_name === null || (is_array($worker_name) && count($worker_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_name when calling aPIAcquireDocumentVersion'
            );
        }
        // verify the required parameter 'properties' is set
        if ($properties === null || (is_array($properties) && count($properties) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $properties when calling aPIAcquireDocumentVersion'
            );
        }

        $resourcePath = '/v1/extensions/{extensionId}/documentVersionQueue/{workerName}/acquire';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($extension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'extensionId' . '}',
                ObjectSerializer::toPathValue($extension_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_name !== null) {
            $resourcePath = str_replace(
                '{' . 'workerName' . '}',
                ObjectSerializer::toPathValue($worker_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($properties)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($properties));
            } else {
                $httpBody = $properties;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aPICompleteDocumentVersion
     *
     * Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
     *
     * @param  string $extension_id The unique ID of the extension. (required)
     * @param  string $worker_name The name of the worker that processed the task. (required)
     * @param  string $document_version_id The ID of the document version that was processed. (required)
     * @param  \OpenAPI\Client\Model\V1CompleteDocumentVersionRequestProperties $properties properties (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1CompletedDocumentVersion|\OpenAPI\Client\Model\RpcStatus
     */
    public function aPICompleteDocumentVersion($extension_id, $worker_name, $document_version_id, $properties)
    {
        list($response) = $this->aPICompleteDocumentVersionWithHttpInfo($extension_id, $worker_name, $document_version_id, $properties);
        return $response;
    }

    /**
     * Operation aPICompleteDocumentVersionWithHttpInfo
     *
     * Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
     *
     * @param  string $extension_id The unique ID of the extension. (required)
     * @param  string $worker_name The name of the worker that processed the task. (required)
     * @param  string $document_version_id The ID of the document version that was processed. (required)
     * @param  \OpenAPI\Client\Model\V1CompleteDocumentVersionRequestProperties $properties (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1CompletedDocumentVersion|\OpenAPI\Client\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function aPICompleteDocumentVersionWithHttpInfo($extension_id, $worker_name, $document_version_id, $properties)
    {
        $request = $this->aPICompleteDocumentVersionRequest($extension_id, $worker_name, $document_version_id, $properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\V1CompletedDocumentVersion' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\V1CompletedDocumentVersion', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\RpcStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\V1CompletedDocumentVersion';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1CompletedDocumentVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation aPICompleteDocumentVersionAsync
     *
     * Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
     *
     * @param  string $extension_id The unique ID of the extension. (required)
     * @param  string $worker_name The name of the worker that processed the task. (required)
     * @param  string $document_version_id The ID of the document version that was processed. (required)
     * @param  \OpenAPI\Client\Model\V1CompleteDocumentVersionRequestProperties $properties (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aPICompleteDocumentVersionAsync($extension_id, $worker_name, $document_version_id, $properties)
    {
        return $this->aPICompleteDocumentVersionAsyncWithHttpInfo($extension_id, $worker_name, $document_version_id, $properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aPICompleteDocumentVersionAsyncWithHttpInfo
     *
     * Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
     *
     * @param  string $extension_id The unique ID of the extension. (required)
     * @param  string $worker_name The name of the worker that processed the task. (required)
     * @param  string $document_version_id The ID of the document version that was processed. (required)
     * @param  \OpenAPI\Client\Model\V1CompleteDocumentVersionRequestProperties $properties (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aPICompleteDocumentVersionAsyncWithHttpInfo($extension_id, $worker_name, $document_version_id, $properties)
    {
        $returnType = '\OpenAPI\Client\Model\V1CompletedDocumentVersion';
        $request = $this->aPICompleteDocumentVersionRequest($extension_id, $worker_name, $document_version_id, $properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aPICompleteDocumentVersion'
     *
     * @param  string $extension_id The unique ID of the extension. (required)
     * @param  string $worker_name The name of the worker that processed the task. (required)
     * @param  string $document_version_id The ID of the document version that was processed. (required)
     * @param  \OpenAPI\Client\Model\V1CompleteDocumentVersionRequestProperties $properties (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aPICompleteDocumentVersionRequest($extension_id, $worker_name, $document_version_id, $properties)
    {
        // verify the required parameter 'extension_id' is set
        if ($extension_id === null || (is_array($extension_id) && count($extension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extension_id when calling aPICompleteDocumentVersion'
            );
        }
        // verify the required parameter 'worker_name' is set
        if ($worker_name === null || (is_array($worker_name) && count($worker_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_name when calling aPICompleteDocumentVersion'
            );
        }
        // verify the required parameter 'document_version_id' is set
        if ($document_version_id === null || (is_array($document_version_id) && count($document_version_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_version_id when calling aPICompleteDocumentVersion'
            );
        }
        // verify the required parameter 'properties' is set
        if ($properties === null || (is_array($properties) && count($properties) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $properties when calling aPICompleteDocumentVersion'
            );
        }

        $resourcePath = '/v1/extensions/{extensionId}/documentVersionQueue/{workerName}/complete/{documentVersionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($extension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'extensionId' . '}',
                ObjectSerializer::toPathValue($extension_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_name !== null) {
            $resourcePath = str_replace(
                '{' . 'workerName' . '}',
                ObjectSerializer::toPathValue($worker_name),
                $resourcePath
            );
        }
        // path params
        if ($document_version_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentVersionId' . '}',
                ObjectSerializer::toPathValue($document_version_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($properties)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($properties));
            } else {
                $httpBody = $properties;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aPICreateDocumentVersion
     *
     * Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed.
     *
     * @param  string $extension_id The unique ID of the extension. (required)
     * @param  \OpenAPI\Client\Model\InlineObject $body body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1DocumentVersion|\OpenAPI\Client\Model\RpcStatus
     */
    public function aPICreateDocumentVersion($extension_id, $body)
    {
        list($response) = $this->aPICreateDocumentVersionWithHttpInfo($extension_id, $body);
        return $response;
    }

    /**
     * Operation aPICreateDocumentVersionWithHttpInfo
     *
     * Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed.
     *
     * @param  string $extension_id The unique ID of the extension. (required)
     * @param  \OpenAPI\Client\Model\InlineObject $body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1DocumentVersion|\OpenAPI\Client\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function aPICreateDocumentVersionWithHttpInfo($extension_id, $body)
    {
        $request = $this->aPICreateDocumentVersionRequest($extension_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\V1DocumentVersion' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\V1DocumentVersion', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\RpcStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\V1DocumentVersion';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1DocumentVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation aPICreateDocumentVersionAsync
     *
     * Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed.
     *
     * @param  string $extension_id The unique ID of the extension. (required)
     * @param  \OpenAPI\Client\Model\InlineObject $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aPICreateDocumentVersionAsync($extension_id, $body)
    {
        return $this->aPICreateDocumentVersionAsyncWithHttpInfo($extension_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aPICreateDocumentVersionAsyncWithHttpInfo
     *
     * Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed.
     *
     * @param  string $extension_id The unique ID of the extension. (required)
     * @param  \OpenAPI\Client\Model\InlineObject $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aPICreateDocumentVersionAsyncWithHttpInfo($extension_id, $body)
    {
        $returnType = '\OpenAPI\Client\Model\V1DocumentVersion';
        $request = $this->aPICreateDocumentVersionRequest($extension_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aPICreateDocumentVersion'
     *
     * @param  string $extension_id The unique ID of the extension. (required)
     * @param  \OpenAPI\Client\Model\InlineObject $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aPICreateDocumentVersionRequest($extension_id, $body)
    {
        // verify the required parameter 'extension_id' is set
        if ($extension_id === null || (is_array($extension_id) && count($extension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extension_id when calling aPICreateDocumentVersion'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling aPICreateDocumentVersion'
            );
        }

        $resourcePath = '/v1/extensions/{extensionId}/documentVersion';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($extension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'extensionId' . '}',
                ObjectSerializer::toPathValue($extension_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
