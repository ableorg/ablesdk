/*
 * Able API
 *
 * SDK for building integrations with Able.
 *
 * The version of the OpenAPI document: 1.20230615090446
 * Contact: support@able.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Able.Sdk.Client;
using Able.Sdk.Model;

namespace Able.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new relationship.
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent tenant resource name where this relationship will be created. Format: tenants/{tenant}</param>
        /// <param name="relationship">The relationship to create.</param>
        /// <param name="relationshipId">The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)</param>
        /// <returns>V1Relationship</returns>
        V1Relationship APICreateRelationship(string parent, V1Relationship relationship, string relationshipId = default(string));

        /// <summary>
        /// Creates a new relationship.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent tenant resource name where this relationship will be created. Format: tenants/{tenant}</param>
        /// <param name="relationship">The relationship to create.</param>
        /// <param name="relationshipId">The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)</param>
        /// <returns>ApiResponse of V1Relationship</returns>
        ApiResponse<V1Relationship> APICreateRelationshipWithHttpInfo(string parent, V1Relationship relationship, string relationshipId = default(string));
        /// <summary>
        /// Creates a new upload.
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship}</param>
        /// <param name="upload">The upload to create.</param>
        /// <param name="uploadId">The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)</param>
        /// <returns>V1Upload</returns>
        V1Upload APICreateUpload(string parent, V1Upload upload, string uploadId = default(string));

        /// <summary>
        /// Creates a new upload.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship}</param>
        /// <param name="upload">The upload to create.</param>
        /// <param name="uploadId">The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)</param>
        /// <returns>ApiResponse of V1Upload</returns>
        ApiResponse<V1Upload> APICreateUploadWithHttpInfo(string parent, V1Upload upload, string uploadId = default(string));
        /// <summary>
        /// Creates an upload session to start uploading a file.
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload}</param>
        /// <param name="body"></param>
        /// <returns>V1UploadRef</returns>
        V1UploadRef APIStartUpload(string parent, Object body);

        /// <summary>
        /// Creates an upload session to start uploading a file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload}</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of V1UploadRef</returns>
        ApiResponse<V1UploadRef> APIStartUploadWithHttpInfo(string parent, Object body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new relationship.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent tenant resource name where this relationship will be created. Format: tenants/{tenant}</param>
        /// <param name="relationship">The relationship to create.</param>
        /// <param name="relationshipId">The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Relationship</returns>
        System.Threading.Tasks.Task<V1Relationship> APICreateRelationshipAsync(string parent, V1Relationship relationship, string relationshipId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new relationship.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent tenant resource name where this relationship will be created. Format: tenants/{tenant}</param>
        /// <param name="relationship">The relationship to create.</param>
        /// <param name="relationshipId">The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Relationship)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Relationship>> APICreateRelationshipWithHttpInfoAsync(string parent, V1Relationship relationship, string relationshipId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new upload.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship}</param>
        /// <param name="upload">The upload to create.</param>
        /// <param name="uploadId">The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Upload</returns>
        System.Threading.Tasks.Task<V1Upload> APICreateUploadAsync(string parent, V1Upload upload, string uploadId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new upload.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship}</param>
        /// <param name="upload">The upload to create.</param>
        /// <param name="uploadId">The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Upload)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Upload>> APICreateUploadWithHttpInfoAsync(string parent, V1Upload upload, string uploadId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates an upload session to start uploading a file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload}</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1UploadRef</returns>
        System.Threading.Tasks.Task<V1UploadRef> APIStartUploadAsync(string parent, Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates an upload session to start uploading a file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload}</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1UploadRef)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1UploadRef>> APIStartUploadWithHttpInfoAsync(string parent, Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIApi : IAPIApiSync, IAPIApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class APIApi : IAPIApi
    {
        private Able.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="APIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public APIApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public APIApi(String basePath)
        {
            this.Configuration = Able.Sdk.Client.Configuration.MergeConfigurations(
                Able.Sdk.Client.GlobalConfiguration.Instance,
                new Able.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Able.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Able.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Able.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public APIApi(Able.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Able.Sdk.Client.Configuration.MergeConfigurations(
                Able.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Able.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Able.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Able.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public APIApi(Able.Sdk.Client.ISynchronousClient client, Able.Sdk.Client.IAsynchronousClient asyncClient, Able.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Able.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Able.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Able.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Able.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Able.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new relationship. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent tenant resource name where this relationship will be created. Format: tenants/{tenant}</param>
        /// <param name="relationship">The relationship to create.</param>
        /// <param name="relationshipId">The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)</param>
        /// <returns>V1Relationship</returns>
        public V1Relationship APICreateRelationship(string parent, V1Relationship relationship, string relationshipId = default(string))
        {
            Able.Sdk.Client.ApiResponse<V1Relationship> localVarResponse = APICreateRelationshipWithHttpInfo(parent, relationship, relationshipId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new relationship. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent tenant resource name where this relationship will be created. Format: tenants/{tenant}</param>
        /// <param name="relationship">The relationship to create.</param>
        /// <param name="relationshipId">The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)</param>
        /// <returns>ApiResponse of V1Relationship</returns>
        public Able.Sdk.Client.ApiResponse<V1Relationship> APICreateRelationshipWithHttpInfo(string parent, V1Relationship relationship, string relationshipId = default(string))
        {
            // verify the required parameter 'parent' is set
            if (parent == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'parent' when calling APIApi->APICreateRelationship");

            // verify the required parameter 'relationship' is set
            if (relationship == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'relationship' when calling APIApi->APICreateRelationship");

            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("parent", Able.Sdk.Client.ClientUtils.ParameterToString(parent)); // path parameter
            if (relationshipId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Able.Sdk.Client.ClientUtils.ParameterToMultiMap("", "relationshipId", relationshipId));
            }
            localVarRequestOptions.Data = relationship;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1Relationship>("/v1/{parent}/relationships", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APICreateRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new relationship. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent tenant resource name where this relationship will be created. Format: tenants/{tenant}</param>
        /// <param name="relationship">The relationship to create.</param>
        /// <param name="relationshipId">The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Relationship</returns>
        public async System.Threading.Tasks.Task<V1Relationship> APICreateRelationshipAsync(string parent, V1Relationship relationship, string relationshipId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Able.Sdk.Client.ApiResponse<V1Relationship> localVarResponse = await APICreateRelationshipWithHttpInfoAsync(parent, relationship, relationshipId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new relationship. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent tenant resource name where this relationship will be created. Format: tenants/{tenant}</param>
        /// <param name="relationship">The relationship to create.</param>
        /// <param name="relationshipId">The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Relationship)</returns>
        public async System.Threading.Tasks.Task<Able.Sdk.Client.ApiResponse<V1Relationship>> APICreateRelationshipWithHttpInfoAsync(string parent, V1Relationship relationship, string relationshipId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parent' is set
            if (parent == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'parent' when calling APIApi->APICreateRelationship");

            // verify the required parameter 'relationship' is set
            if (relationship == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'relationship' when calling APIApi->APICreateRelationship");


            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("parent", Able.Sdk.Client.ClientUtils.ParameterToString(parent)); // path parameter
            if (relationshipId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Able.Sdk.Client.ClientUtils.ParameterToMultiMap("", "relationshipId", relationshipId));
            }
            localVarRequestOptions.Data = relationship;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<V1Relationship>("/v1/{parent}/relationships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APICreateRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new upload. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship}</param>
        /// <param name="upload">The upload to create.</param>
        /// <param name="uploadId">The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)</param>
        /// <returns>V1Upload</returns>
        public V1Upload APICreateUpload(string parent, V1Upload upload, string uploadId = default(string))
        {
            Able.Sdk.Client.ApiResponse<V1Upload> localVarResponse = APICreateUploadWithHttpInfo(parent, upload, uploadId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new upload. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship}</param>
        /// <param name="upload">The upload to create.</param>
        /// <param name="uploadId">The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)</param>
        /// <returns>ApiResponse of V1Upload</returns>
        public Able.Sdk.Client.ApiResponse<V1Upload> APICreateUploadWithHttpInfo(string parent, V1Upload upload, string uploadId = default(string))
        {
            // verify the required parameter 'parent' is set
            if (parent == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'parent' when calling APIApi->APICreateUpload");

            // verify the required parameter 'upload' is set
            if (upload == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'upload' when calling APIApi->APICreateUpload");

            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("parent", Able.Sdk.Client.ClientUtils.ParameterToString(parent)); // path parameter
            if (uploadId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Able.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uploadId", uploadId));
            }
            localVarRequestOptions.Data = upload;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1Upload>("/v1/{parent}/uploads", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APICreateUpload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new upload. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship}</param>
        /// <param name="upload">The upload to create.</param>
        /// <param name="uploadId">The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Upload</returns>
        public async System.Threading.Tasks.Task<V1Upload> APICreateUploadAsync(string parent, V1Upload upload, string uploadId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Able.Sdk.Client.ApiResponse<V1Upload> localVarResponse = await APICreateUploadWithHttpInfoAsync(parent, upload, uploadId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new upload. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship}</param>
        /// <param name="upload">The upload to create.</param>
        /// <param name="uploadId">The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Upload)</returns>
        public async System.Threading.Tasks.Task<Able.Sdk.Client.ApiResponse<V1Upload>> APICreateUploadWithHttpInfoAsync(string parent, V1Upload upload, string uploadId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parent' is set
            if (parent == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'parent' when calling APIApi->APICreateUpload");

            // verify the required parameter 'upload' is set
            if (upload == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'upload' when calling APIApi->APICreateUpload");


            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("parent", Able.Sdk.Client.ClientUtils.ParameterToString(parent)); // path parameter
            if (uploadId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Able.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uploadId", uploadId));
            }
            localVarRequestOptions.Data = upload;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<V1Upload>("/v1/{parent}/uploads", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APICreateUpload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an upload session to start uploading a file. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload}</param>
        /// <param name="body"></param>
        /// <returns>V1UploadRef</returns>
        public V1UploadRef APIStartUpload(string parent, Object body)
        {
            Able.Sdk.Client.ApiResponse<V1UploadRef> localVarResponse = APIStartUploadWithHttpInfo(parent, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an upload session to start uploading a file. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload}</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of V1UploadRef</returns>
        public Able.Sdk.Client.ApiResponse<V1UploadRef> APIStartUploadWithHttpInfo(string parent, Object body)
        {
            // verify the required parameter 'parent' is set
            if (parent == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'parent' when calling APIApi->APIStartUpload");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling APIApi->APIStartUpload");

            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("parent", Able.Sdk.Client.ClientUtils.ParameterToString(parent)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1UploadRef>("/v1/{parent}:startUpload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APIStartUpload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an upload session to start uploading a file. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload}</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1UploadRef</returns>
        public async System.Threading.Tasks.Task<V1UploadRef> APIStartUploadAsync(string parent, Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Able.Sdk.Client.ApiResponse<V1UploadRef> localVarResponse = await APIStartUploadWithHttpInfoAsync(parent, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an upload session to start uploading a file. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload}</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1UploadRef)</returns>
        public async System.Threading.Tasks.Task<Able.Sdk.Client.ApiResponse<V1UploadRef>> APIStartUploadWithHttpInfoAsync(string parent, Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parent' is set
            if (parent == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'parent' when calling APIApi->APIStartUpload");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling APIApi->APIStartUpload");


            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("parent", Able.Sdk.Client.ClientUtils.ParameterToString(parent)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<V1UploadRef>("/v1/{parent}:startUpload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APIStartUpload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
