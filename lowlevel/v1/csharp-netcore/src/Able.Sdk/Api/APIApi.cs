/*
 * Able API
 *
 * SDK for building integrations with Able.
 *
 * The version of the OpenAPI document: 1.20230623221606
 * Contact: support@able.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Able.Sdk.Client;
using Able.Sdk.Model;

namespace Able.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Acquires a DocumentContent task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that will process the task.</param>
        /// <param name="body"></param>
        /// <returns>V1AcquiredDocumentContentV1</returns>
        V1AcquiredDocumentContentV1 APIAcquireDocumentContentV1(string extensionId, string workerName, V1AcquireDocumentContentRequestV1Body body);

        /// <summary>
        /// Acquires a DocumentContent task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that will process the task.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of V1AcquiredDocumentContentV1</returns>
        ApiResponse<V1AcquiredDocumentContentV1> APIAcquireDocumentContentV1WithHttpInfo(string extensionId, string workerName, V1AcquireDocumentContentRequestV1Body body);
        /// <summary>
        /// Completes a DocumentContent task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that processed the task.</param>
        /// <param name="documentContentId">The ID of the document content that was processed.</param>
        /// <param name="body"></param>
        /// <returns>V1CompletedDocumentContentV1</returns>
        V1CompletedDocumentContentV1 APICompleteDocumentContentV1(string extensionId, string workerName, string documentContentId, V1CompleteDocumentContentRequestV1Body body);

        /// <summary>
        /// Completes a DocumentContent task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that processed the task.</param>
        /// <param name="documentContentId">The ID of the document content that was processed.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of V1CompletedDocumentContentV1</returns>
        ApiResponse<V1CompletedDocumentContentV1> APICompleteDocumentContentV1WithHttpInfo(string extensionId, string workerName, string documentContentId, V1CompleteDocumentContentRequestV1Body body);
        /// <summary>
        /// Creates a new DocumentContent. The DocumentContent represents a document from an external system that needs to be processed.
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="body"></param>
        /// <returns>V1DocumentContent</returns>
        V1DocumentContent APICreateDocumentContentV1(string extensionId, InlineObject body);

        /// <summary>
        /// Creates a new DocumentContent. The DocumentContent represents a document from an external system that needs to be processed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of V1DocumentContent</returns>
        ApiResponse<V1DocumentContent> APICreateDocumentContentV1WithHttpInfo(string extensionId, InlineObject body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Acquires a DocumentContent task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that will process the task.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1AcquiredDocumentContentV1</returns>
        System.Threading.Tasks.Task<V1AcquiredDocumentContentV1> APIAcquireDocumentContentV1Async(string extensionId, string workerName, V1AcquireDocumentContentRequestV1Body body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Acquires a DocumentContent task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that will process the task.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1AcquiredDocumentContentV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1AcquiredDocumentContentV1>> APIAcquireDocumentContentV1WithHttpInfoAsync(string extensionId, string workerName, V1AcquireDocumentContentRequestV1Body body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Completes a DocumentContent task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that processed the task.</param>
        /// <param name="documentContentId">The ID of the document content that was processed.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1CompletedDocumentContentV1</returns>
        System.Threading.Tasks.Task<V1CompletedDocumentContentV1> APICompleteDocumentContentV1Async(string extensionId, string workerName, string documentContentId, V1CompleteDocumentContentRequestV1Body body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Completes a DocumentContent task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that processed the task.</param>
        /// <param name="documentContentId">The ID of the document content that was processed.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1CompletedDocumentContentV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1CompletedDocumentContentV1>> APICompleteDocumentContentV1WithHttpInfoAsync(string extensionId, string workerName, string documentContentId, V1CompleteDocumentContentRequestV1Body body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new DocumentContent. The DocumentContent represents a document from an external system that needs to be processed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1DocumentContent</returns>
        System.Threading.Tasks.Task<V1DocumentContent> APICreateDocumentContentV1Async(string extensionId, InlineObject body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new DocumentContent. The DocumentContent represents a document from an external system that needs to be processed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1DocumentContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1DocumentContent>> APICreateDocumentContentV1WithHttpInfoAsync(string extensionId, InlineObject body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIApi : IAPIApiSync, IAPIApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class APIApi : IAPIApi
    {
        private Able.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="APIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public APIApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public APIApi(String basePath)
        {
            this.Configuration = Able.Sdk.Client.Configuration.MergeConfigurations(
                Able.Sdk.Client.GlobalConfiguration.Instance,
                new Able.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Able.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Able.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Able.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public APIApi(Able.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Able.Sdk.Client.Configuration.MergeConfigurations(
                Able.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Able.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Able.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Able.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public APIApi(Able.Sdk.Client.ISynchronousClient client, Able.Sdk.Client.IAsynchronousClient asyncClient, Able.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Able.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Able.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Able.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Able.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Able.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Acquires a DocumentContent task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that will process the task.</param>
        /// <param name="body"></param>
        /// <returns>V1AcquiredDocumentContentV1</returns>
        public V1AcquiredDocumentContentV1 APIAcquireDocumentContentV1(string extensionId, string workerName, V1AcquireDocumentContentRequestV1Body body)
        {
            Able.Sdk.Client.ApiResponse<V1AcquiredDocumentContentV1> localVarResponse = APIAcquireDocumentContentV1WithHttpInfo(extensionId, workerName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Acquires a DocumentContent task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that will process the task.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of V1AcquiredDocumentContentV1</returns>
        public Able.Sdk.Client.ApiResponse<V1AcquiredDocumentContentV1> APIAcquireDocumentContentV1WithHttpInfo(string extensionId, string workerName, V1AcquireDocumentContentRequestV1Body body)
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'extensionId' when calling APIApi->APIAcquireDocumentContentV1");

            // verify the required parameter 'workerName' is set
            if (workerName == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'workerName' when calling APIApi->APIAcquireDocumentContentV1");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling APIApi->APIAcquireDocumentContentV1");

            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("extensionId", Able.Sdk.Client.ClientUtils.ParameterToString(extensionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workerName", Able.Sdk.Client.ClientUtils.ParameterToString(workerName)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<V1AcquiredDocumentContentV1>("/v1/extensions/{extensionId}/documentContentQueue/{workerName}/acquire", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APIAcquireDocumentContentV1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Acquires a DocumentContent task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that will process the task.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1AcquiredDocumentContentV1</returns>
        public async System.Threading.Tasks.Task<V1AcquiredDocumentContentV1> APIAcquireDocumentContentV1Async(string extensionId, string workerName, V1AcquireDocumentContentRequestV1Body body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Able.Sdk.Client.ApiResponse<V1AcquiredDocumentContentV1> localVarResponse = await APIAcquireDocumentContentV1WithHttpInfoAsync(extensionId, workerName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Acquires a DocumentContent task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that will process the task.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1AcquiredDocumentContentV1)</returns>
        public async System.Threading.Tasks.Task<Able.Sdk.Client.ApiResponse<V1AcquiredDocumentContentV1>> APIAcquireDocumentContentV1WithHttpInfoAsync(string extensionId, string workerName, V1AcquireDocumentContentRequestV1Body body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'extensionId' when calling APIApi->APIAcquireDocumentContentV1");

            // verify the required parameter 'workerName' is set
            if (workerName == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'workerName' when calling APIApi->APIAcquireDocumentContentV1");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling APIApi->APIAcquireDocumentContentV1");


            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("extensionId", Able.Sdk.Client.ClientUtils.ParameterToString(extensionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workerName", Able.Sdk.Client.ClientUtils.ParameterToString(workerName)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<V1AcquiredDocumentContentV1>("/v1/extensions/{extensionId}/documentContentQueue/{workerName}/acquire", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APIAcquireDocumentContentV1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Completes a DocumentContent task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that processed the task.</param>
        /// <param name="documentContentId">The ID of the document content that was processed.</param>
        /// <param name="body"></param>
        /// <returns>V1CompletedDocumentContentV1</returns>
        public V1CompletedDocumentContentV1 APICompleteDocumentContentV1(string extensionId, string workerName, string documentContentId, V1CompleteDocumentContentRequestV1Body body)
        {
            Able.Sdk.Client.ApiResponse<V1CompletedDocumentContentV1> localVarResponse = APICompleteDocumentContentV1WithHttpInfo(extensionId, workerName, documentContentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Completes a DocumentContent task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that processed the task.</param>
        /// <param name="documentContentId">The ID of the document content that was processed.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of V1CompletedDocumentContentV1</returns>
        public Able.Sdk.Client.ApiResponse<V1CompletedDocumentContentV1> APICompleteDocumentContentV1WithHttpInfo(string extensionId, string workerName, string documentContentId, V1CompleteDocumentContentRequestV1Body body)
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'extensionId' when calling APIApi->APICompleteDocumentContentV1");

            // verify the required parameter 'workerName' is set
            if (workerName == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'workerName' when calling APIApi->APICompleteDocumentContentV1");

            // verify the required parameter 'documentContentId' is set
            if (documentContentId == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'documentContentId' when calling APIApi->APICompleteDocumentContentV1");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling APIApi->APICompleteDocumentContentV1");

            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("extensionId", Able.Sdk.Client.ClientUtils.ParameterToString(extensionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workerName", Able.Sdk.Client.ClientUtils.ParameterToString(workerName)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentContentId", Able.Sdk.Client.ClientUtils.ParameterToString(documentContentId)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<V1CompletedDocumentContentV1>("/v1/extensions/{extensionId}/documentContentQueue/{workerName}/complete/{documentContentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APICompleteDocumentContentV1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Completes a DocumentContent task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that processed the task.</param>
        /// <param name="documentContentId">The ID of the document content that was processed.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1CompletedDocumentContentV1</returns>
        public async System.Threading.Tasks.Task<V1CompletedDocumentContentV1> APICompleteDocumentContentV1Async(string extensionId, string workerName, string documentContentId, V1CompleteDocumentContentRequestV1Body body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Able.Sdk.Client.ApiResponse<V1CompletedDocumentContentV1> localVarResponse = await APICompleteDocumentContentV1WithHttpInfoAsync(extensionId, workerName, documentContentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Completes a DocumentContent task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="workerName">The name of the worker that processed the task.</param>
        /// <param name="documentContentId">The ID of the document content that was processed.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1CompletedDocumentContentV1)</returns>
        public async System.Threading.Tasks.Task<Able.Sdk.Client.ApiResponse<V1CompletedDocumentContentV1>> APICompleteDocumentContentV1WithHttpInfoAsync(string extensionId, string workerName, string documentContentId, V1CompleteDocumentContentRequestV1Body body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'extensionId' when calling APIApi->APICompleteDocumentContentV1");

            // verify the required parameter 'workerName' is set
            if (workerName == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'workerName' when calling APIApi->APICompleteDocumentContentV1");

            // verify the required parameter 'documentContentId' is set
            if (documentContentId == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'documentContentId' when calling APIApi->APICompleteDocumentContentV1");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling APIApi->APICompleteDocumentContentV1");


            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("extensionId", Able.Sdk.Client.ClientUtils.ParameterToString(extensionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("workerName", Able.Sdk.Client.ClientUtils.ParameterToString(workerName)); // path parameter
            localVarRequestOptions.PathParameters.Add("documentContentId", Able.Sdk.Client.ClientUtils.ParameterToString(documentContentId)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<V1CompletedDocumentContentV1>("/v1/extensions/{extensionId}/documentContentQueue/{workerName}/complete/{documentContentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APICompleteDocumentContentV1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new DocumentContent. The DocumentContent represents a document from an external system that needs to be processed. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="body"></param>
        /// <returns>V1DocumentContent</returns>
        public V1DocumentContent APICreateDocumentContentV1(string extensionId, InlineObject body)
        {
            Able.Sdk.Client.ApiResponse<V1DocumentContent> localVarResponse = APICreateDocumentContentV1WithHttpInfo(extensionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new DocumentContent. The DocumentContent represents a document from an external system that needs to be processed. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of V1DocumentContent</returns>
        public Able.Sdk.Client.ApiResponse<V1DocumentContent> APICreateDocumentContentV1WithHttpInfo(string extensionId, InlineObject body)
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'extensionId' when calling APIApi->APICreateDocumentContentV1");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling APIApi->APICreateDocumentContentV1");

            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("extensionId", Able.Sdk.Client.ClientUtils.ParameterToString(extensionId)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<V1DocumentContent>("/v1/extensions/{extensionId}/documentContent", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APICreateDocumentContentV1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new DocumentContent. The DocumentContent represents a document from an external system that needs to be processed. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1DocumentContent</returns>
        public async System.Threading.Tasks.Task<V1DocumentContent> APICreateDocumentContentV1Async(string extensionId, InlineObject body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Able.Sdk.Client.ApiResponse<V1DocumentContent> localVarResponse = await APICreateDocumentContentV1WithHttpInfoAsync(extensionId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new DocumentContent. The DocumentContent represents a document from an external system that needs to be processed. 
        /// </summary>
        /// <exception cref="Able.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The unique ID of the extension.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1DocumentContent)</returns>
        public async System.Threading.Tasks.Task<Able.Sdk.Client.ApiResponse<V1DocumentContent>> APICreateDocumentContentV1WithHttpInfoAsync(string extensionId, InlineObject body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'extensionId' when calling APIApi->APICreateDocumentContentV1");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Able.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling APIApi->APICreateDocumentContentV1");


            Able.Sdk.Client.RequestOptions localVarRequestOptions = new Able.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Able.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Able.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("extensionId", Able.Sdk.Client.ClientUtils.ParameterToString(extensionId)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<V1DocumentContent>("/v1/extensions/{extensionId}/documentContent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("APICreateDocumentContentV1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
