/*
 * Able API
 * SDK for building integrations with Able.
 *
 * The version of the OpenAPI document: 1.20230615090446
 * Contact: support@able.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ableai.api.sdk;

import com.ableai.api.ApiCallback;
import com.ableai.api.ApiClient;
import com.ableai.api.ApiException;
import com.ableai.api.ApiResponse;
import com.ableai.api.Configuration;
import com.ableai.api.Pair;
import com.ableai.api.ProgressRequestBody;
import com.ableai.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ableai.api.sdk.model.RpcStatus;
import com.ableai.api.sdk.model.V1Relationship;
import com.ableai.api.sdk.model.V1Upload;
import com.ableai.api.sdk.model.V1UploadRef;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiApi {
    private ApiClient localVarApiClient;

    public ApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for aPICreateRelationship
     * @param parent The parent tenant resource name where this relationship will be created. Format: tenants/{tenant} (required)
     * @param relationship The relationship to create. (required)
     * @param relationshipId The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aPICreateRelationshipCall(String parent, V1Relationship relationship, String relationshipId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = relationship;

        // create path and map variables
        String localVarPath = "/v1/{parent}/relationships"
            .replaceAll("\\{" + "parent" + "\\}", localVarApiClient.escapeString(parent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (relationshipId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relationshipId", relationshipId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aPICreateRelationshipValidateBeforeCall(String parent, V1Relationship relationship, String relationshipId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'parent' is set
        if (parent == null) {
            throw new ApiException("Missing the required parameter 'parent' when calling aPICreateRelationship(Async)");
        }
        
        // verify the required parameter 'relationship' is set
        if (relationship == null) {
            throw new ApiException("Missing the required parameter 'relationship' when calling aPICreateRelationship(Async)");
        }
        

        okhttp3.Call localVarCall = aPICreateRelationshipCall(parent, relationship, relationshipId, _callback);
        return localVarCall;

    }

    /**
     * Creates a new relationship.
     * 
     * @param parent The parent tenant resource name where this relationship will be created. Format: tenants/{tenant} (required)
     * @param relationship The relationship to create. (required)
     * @param relationshipId The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     * @return V1Relationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1Relationship aPICreateRelationship(String parent, V1Relationship relationship, String relationshipId) throws ApiException {
        ApiResponse<V1Relationship> localVarResp = aPICreateRelationshipWithHttpInfo(parent, relationship, relationshipId);
        return localVarResp.getData();
    }

    /**
     * Creates a new relationship.
     * 
     * @param parent The parent tenant resource name where this relationship will be created. Format: tenants/{tenant} (required)
     * @param relationship The relationship to create. (required)
     * @param relationshipId The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     * @return ApiResponse&lt;V1Relationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1Relationship> aPICreateRelationshipWithHttpInfo(String parent, V1Relationship relationship, String relationshipId) throws ApiException {
        okhttp3.Call localVarCall = aPICreateRelationshipValidateBeforeCall(parent, relationship, relationshipId, null);
        Type localVarReturnType = new TypeToken<V1Relationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new relationship. (asynchronously)
     * 
     * @param parent The parent tenant resource name where this relationship will be created. Format: tenants/{tenant} (required)
     * @param relationship The relationship to create. (required)
     * @param relationshipId The ID to use for the relationship, which will become the final component of the relationship&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aPICreateRelationshipAsync(String parent, V1Relationship relationship, String relationshipId, final ApiCallback<V1Relationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = aPICreateRelationshipValidateBeforeCall(parent, relationship, relationshipId, _callback);
        Type localVarReturnType = new TypeToken<V1Relationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aPICreateUpload
     * @param parent The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship} (required)
     * @param upload The upload to create. (required)
     * @param uploadId The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aPICreateUploadCall(String parent, V1Upload upload, String uploadId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = upload;

        // create path and map variables
        String localVarPath = "/v1/{parent}/uploads"
            .replaceAll("\\{" + "parent" + "\\}", localVarApiClient.escapeString(parent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uploadId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadId", uploadId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aPICreateUploadValidateBeforeCall(String parent, V1Upload upload, String uploadId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'parent' is set
        if (parent == null) {
            throw new ApiException("Missing the required parameter 'parent' when calling aPICreateUpload(Async)");
        }
        
        // verify the required parameter 'upload' is set
        if (upload == null) {
            throw new ApiException("Missing the required parameter 'upload' when calling aPICreateUpload(Async)");
        }
        

        okhttp3.Call localVarCall = aPICreateUploadCall(parent, upload, uploadId, _callback);
        return localVarCall;

    }

    /**
     * Creates a new upload.
     * 
     * @param parent The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship} (required)
     * @param upload The upload to create. (required)
     * @param uploadId The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     * @return V1Upload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1Upload aPICreateUpload(String parent, V1Upload upload, String uploadId) throws ApiException {
        ApiResponse<V1Upload> localVarResp = aPICreateUploadWithHttpInfo(parent, upload, uploadId);
        return localVarResp.getData();
    }

    /**
     * Creates a new upload.
     * 
     * @param parent The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship} (required)
     * @param upload The upload to create. (required)
     * @param uploadId The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     * @return ApiResponse&lt;V1Upload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1Upload> aPICreateUploadWithHttpInfo(String parent, V1Upload upload, String uploadId) throws ApiException {
        okhttp3.Call localVarCall = aPICreateUploadValidateBeforeCall(parent, upload, uploadId, null);
        Type localVarReturnType = new TypeToken<V1Upload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new upload. (asynchronously)
     * 
     * @param parent The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship} (required)
     * @param upload The upload to create. (required)
     * @param uploadId The ID to use for the upload, which will become the final component of the upload&#39;s resource name.  This value should be a valid XID.  If no ID is specified, an ID will be generated by the server. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aPICreateUploadAsync(String parent, V1Upload upload, String uploadId, final ApiCallback<V1Upload> _callback) throws ApiException {

        okhttp3.Call localVarCall = aPICreateUploadValidateBeforeCall(parent, upload, uploadId, _callback);
        Type localVarReturnType = new TypeToken<V1Upload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aPIStartUpload
     * @param parent The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload} (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aPIStartUploadCall(String parent, Object body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/{parent}:startUpload"
            .replaceAll("\\{" + "parent" + "\\}", localVarApiClient.escapeString(parent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aPIStartUploadValidateBeforeCall(String parent, Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'parent' is set
        if (parent == null) {
            throw new ApiException("Missing the required parameter 'parent' when calling aPIStartUpload(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling aPIStartUpload(Async)");
        }
        

        okhttp3.Call localVarCall = aPIStartUploadCall(parent, body, _callback);
        return localVarCall;

    }

    /**
     * Creates an upload session to start uploading a file.
     * 
     * @param parent The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload} (required)
     * @param body  (required)
     * @return V1UploadRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1UploadRef aPIStartUpload(String parent, Object body) throws ApiException {
        ApiResponse<V1UploadRef> localVarResp = aPIStartUploadWithHttpInfo(parent, body);
        return localVarResp.getData();
    }

    /**
     * Creates an upload session to start uploading a file.
     * 
     * @param parent The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload} (required)
     * @param body  (required)
     * @return ApiResponse&lt;V1UploadRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1UploadRef> aPIStartUploadWithHttpInfo(String parent, Object body) throws ApiException {
        okhttp3.Call localVarCall = aPIStartUploadValidateBeforeCall(parent, body, null);
        Type localVarReturnType = new TypeToken<V1UploadRef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates an upload session to start uploading a file. (asynchronously)
     * 
     * @param parent The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload} (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aPIStartUploadAsync(String parent, Object body, final ApiCallback<V1UploadRef> _callback) throws ApiException {

        okhttp3.Call localVarCall = aPIStartUploadValidateBeforeCall(parent, body, _callback);
        Type localVarReturnType = new TypeToken<V1UploadRef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
