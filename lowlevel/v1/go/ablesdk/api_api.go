/*
 * Able API
 *
 * SDK for building integrations with Able.
 *
 * API version: 1.20230615090446
 * Contact: support@able.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ablesdk

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// APIApiService APIApi service
type APIApiService service

type ApiAPICreateRelationshipRequest struct {
	ctx _context.Context
	ApiService *APIApiService
	parent string
	relationship *V1Relationship
	relationshipId *string
}

func (r ApiAPICreateRelationshipRequest) Relationship(relationship V1Relationship) ApiAPICreateRelationshipRequest {
	r.relationship = &relationship
	return r
}
func (r ApiAPICreateRelationshipRequest) RelationshipId(relationshipId string) ApiAPICreateRelationshipRequest {
	r.relationshipId = &relationshipId
	return r
}

func (r ApiAPICreateRelationshipRequest) Execute() (V1Relationship, *_nethttp.Response, error) {
	return r.ApiService.APICreateRelationshipExecute(r)
}

/*
 * APICreateRelationship Creates a new relationship.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param parent The parent tenant resource name where this relationship will be created. Format: tenants/{tenant}
 * @return ApiAPICreateRelationshipRequest
 */
func (a *APIApiService) APICreateRelationship(ctx _context.Context, parent string) ApiAPICreateRelationshipRequest {
	return ApiAPICreateRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		parent: parent,
	}
}

/*
 * Execute executes the request
 * @return V1Relationship
 */
func (a *APIApiService) APICreateRelationshipExecute(r ApiAPICreateRelationshipRequest) (V1Relationship, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  V1Relationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "APIApiService.APICreateRelationship")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{parent}/relationships"
	localVarPath = strings.Replace(localVarPath, "{"+"parent"+"}", _neturl.PathEscape(parameterToString(r.parent, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.relationship == nil {
		return localVarReturnValue, nil, reportError("relationship is required and must be specified")
	}

	if r.relationshipId != nil {
		localVarQueryParams.Add("relationshipId", parameterToString(*r.relationshipId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.relationship
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAPICreateUploadRequest struct {
	ctx _context.Context
	ApiService *APIApiService
	parent string
	upload *V1Upload
	uploadId *string
}

func (r ApiAPICreateUploadRequest) Upload(upload V1Upload) ApiAPICreateUploadRequest {
	r.upload = &upload
	return r
}
func (r ApiAPICreateUploadRequest) UploadId(uploadId string) ApiAPICreateUploadRequest {
	r.uploadId = &uploadId
	return r
}

func (r ApiAPICreateUploadRequest) Execute() (V1Upload, *_nethttp.Response, error) {
	return r.ApiService.APICreateUploadExecute(r)
}

/*
 * APICreateUpload Creates a new upload.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param parent The parent tenant and realtionship where this upload will be created. Format: tenants/{tenant}/realtionships/{realtionship}
 * @return ApiAPICreateUploadRequest
 */
func (a *APIApiService) APICreateUpload(ctx _context.Context, parent string) ApiAPICreateUploadRequest {
	return ApiAPICreateUploadRequest{
		ApiService: a,
		ctx: ctx,
		parent: parent,
	}
}

/*
 * Execute executes the request
 * @return V1Upload
 */
func (a *APIApiService) APICreateUploadExecute(r ApiAPICreateUploadRequest) (V1Upload, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  V1Upload
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "APIApiService.APICreateUpload")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{parent}/uploads"
	localVarPath = strings.Replace(localVarPath, "{"+"parent"+"}", _neturl.PathEscape(parameterToString(r.parent, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.upload == nil {
		return localVarReturnValue, nil, reportError("upload is required and must be specified")
	}

	if r.uploadId != nil {
		localVarQueryParams.Add("uploadId", parameterToString(*r.uploadId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.upload
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAPIStartUploadRequest struct {
	ctx _context.Context
	ApiService *APIApiService
	parent string
	body *map[string]interface{}
}

func (r ApiAPIStartUploadRequest) Body(body map[string]interface{}) ApiAPIStartUploadRequest {
	r.body = &body
	return r
}

func (r ApiAPIStartUploadRequest) Execute() (V1UploadRef, *_nethttp.Response, error) {
	return r.ApiService.APIStartUploadExecute(r)
}

/*
 * APIStartUpload Creates an upload session to start uploading a file.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param parent The parent upload to be started. Format: tenants/{tenant}/realtionships/{realtionship}/uploads/{upload}
 * @return ApiAPIStartUploadRequest
 */
func (a *APIApiService) APIStartUpload(ctx _context.Context, parent string) ApiAPIStartUploadRequest {
	return ApiAPIStartUploadRequest{
		ApiService: a,
		ctx: ctx,
		parent: parent,
	}
}

/*
 * Execute executes the request
 * @return V1UploadRef
 */
func (a *APIApiService) APIStartUploadExecute(r ApiAPIStartUploadRequest) (V1UploadRef, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  V1UploadRef
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "APIApiService.APIStartUpload")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{parent}:startUpload"
	localVarPath = strings.Replace(localVarPath, "{"+"parent"+"}", _neturl.PathEscape(parameterToString(r.parent, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
