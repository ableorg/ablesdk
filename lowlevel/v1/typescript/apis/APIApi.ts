/* tslint:disable */
/* eslint-disable */
/**
 * Able API
 * SDK for building integrations with Able.
 *
 * The version of the OpenAPI document: 1.20230621235520
 * Contact: support@able.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    RpcStatus,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1AcquireDocumentVersionRequestProperties,
    V1AcquireDocumentVersionRequestPropertiesFromJSON,
    V1AcquireDocumentVersionRequestPropertiesToJSON,
    V1AcquiredDocumentVersion,
    V1AcquiredDocumentVersionFromJSON,
    V1AcquiredDocumentVersionToJSON,
    V1CompleteDocumentVersionRequestProperties,
    V1CompleteDocumentVersionRequestPropertiesFromJSON,
    V1CompleteDocumentVersionRequestPropertiesToJSON,
    V1CompletedDocumentVersion,
    V1CompletedDocumentVersionFromJSON,
    V1CompletedDocumentVersionToJSON,
    V1DocumentVersion,
    V1DocumentVersionFromJSON,
    V1DocumentVersionToJSON,
} from '../models';

export interface APIAcquireDocumentVersionRequest {
    extensionId: string;
    workerName: string;
    properties: V1AcquireDocumentVersionRequestProperties;
}

export interface APICompleteDocumentVersionRequest {
    extensionId: string;
    workerName: string;
    documentVersionId: string;
    properties: V1CompleteDocumentVersionRequestProperties;
}

export interface APICreateDocumentVersionRequest {
    extensionId: string;
    body: InlineObject;
}

/**
 * 
 */
export class APIApi extends runtime.BaseAPI {

    /**
     * Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
     */
    async aPIAcquireDocumentVersionRaw(requestParameters: APIAcquireDocumentVersionRequest): Promise<runtime.ApiResponse<V1AcquiredDocumentVersion>> {
        if (requestParameters.extensionId === null || requestParameters.extensionId === undefined) {
            throw new runtime.RequiredError('extensionId','Required parameter requestParameters.extensionId was null or undefined when calling aPIAcquireDocumentVersion.');
        }

        if (requestParameters.workerName === null || requestParameters.workerName === undefined) {
            throw new runtime.RequiredError('workerName','Required parameter requestParameters.workerName was null or undefined when calling aPIAcquireDocumentVersion.');
        }

        if (requestParameters.properties === null || requestParameters.properties === undefined) {
            throw new runtime.RequiredError('properties','Required parameter requestParameters.properties was null or undefined when calling aPIAcquireDocumentVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/extensions/{extensionId}/documentVersionQueue/{workerName}/acquire`.replace(`{${"extensionId"}}`, encodeURIComponent(String(requestParameters.extensionId))).replace(`{${"workerName"}}`, encodeURIComponent(String(requestParameters.workerName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1AcquireDocumentVersionRequestPropertiesToJSON(requestParameters.properties),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AcquiredDocumentVersionFromJSON(jsonValue));
    }

    /**
     * Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
     */
    async aPIAcquireDocumentVersion(requestParameters: APIAcquireDocumentVersionRequest): Promise<V1AcquiredDocumentVersion> {
        const response = await this.aPIAcquireDocumentVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
     */
    async aPICompleteDocumentVersionRaw(requestParameters: APICompleteDocumentVersionRequest): Promise<runtime.ApiResponse<V1CompletedDocumentVersion>> {
        if (requestParameters.extensionId === null || requestParameters.extensionId === undefined) {
            throw new runtime.RequiredError('extensionId','Required parameter requestParameters.extensionId was null or undefined when calling aPICompleteDocumentVersion.');
        }

        if (requestParameters.workerName === null || requestParameters.workerName === undefined) {
            throw new runtime.RequiredError('workerName','Required parameter requestParameters.workerName was null or undefined when calling aPICompleteDocumentVersion.');
        }

        if (requestParameters.documentVersionId === null || requestParameters.documentVersionId === undefined) {
            throw new runtime.RequiredError('documentVersionId','Required parameter requestParameters.documentVersionId was null or undefined when calling aPICompleteDocumentVersion.');
        }

        if (requestParameters.properties === null || requestParameters.properties === undefined) {
            throw new runtime.RequiredError('properties','Required parameter requestParameters.properties was null or undefined when calling aPICompleteDocumentVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/extensions/{extensionId}/documentVersionQueue/{workerName}/complete/{documentVersionId}`.replace(`{${"extensionId"}}`, encodeURIComponent(String(requestParameters.extensionId))).replace(`{${"workerName"}}`, encodeURIComponent(String(requestParameters.workerName))).replace(`{${"documentVersionId"}}`, encodeURIComponent(String(requestParameters.documentVersionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1CompleteDocumentVersionRequestPropertiesToJSON(requestParameters.properties),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CompletedDocumentVersionFromJSON(jsonValue));
    }

    /**
     * Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
     */
    async aPICompleteDocumentVersion(requestParameters: APICompleteDocumentVersionRequest): Promise<V1CompletedDocumentVersion> {
        const response = await this.aPICompleteDocumentVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed.
     */
    async aPICreateDocumentVersionRaw(requestParameters: APICreateDocumentVersionRequest): Promise<runtime.ApiResponse<V1DocumentVersion>> {
        if (requestParameters.extensionId === null || requestParameters.extensionId === undefined) {
            throw new runtime.RequiredError('extensionId','Required parameter requestParameters.extensionId was null or undefined when calling aPICreateDocumentVersion.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling aPICreateDocumentVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/extensions/{extensionId}/documentVersion`.replace(`{${"extensionId"}}`, encodeURIComponent(String(requestParameters.extensionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DocumentVersionFromJSON(jsonValue));
    }

    /**
     * Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed.
     */
    async aPICreateDocumentVersion(requestParameters: APICreateDocumentVersionRequest): Promise<V1DocumentVersion> {
        const response = await this.aPICreateDocumentVersionRaw(requestParameters);
        return await response.value();
    }

}
