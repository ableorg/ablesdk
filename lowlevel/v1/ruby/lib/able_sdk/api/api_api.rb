=begin
#Able API

#SDK for building integrations with Able.

The version of the OpenAPI document: 1.20230621235520
Contact: support@able.ai
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'cgi'

module AbleSDK
  class APIApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
    # @param extension_id [String] The unique ID of the extension.
    # @param worker_name [String] The name of the worker that will process the task.
    # @param properties [V1AcquireDocumentVersionRequestProperties] 
    # @param [Hash] opts the optional parameters
    # @return [V1AcquiredDocumentVersion]
    def a_pi_acquire_document_version(extension_id, worker_name, properties, opts = {})
      data, _status_code, _headers = a_pi_acquire_document_version_with_http_info(extension_id, worker_name, properties, opts)
      data
    end

    # Acquires a DocumentVersion task. The task represents a document to be processed and once acquired, should be processed within the expected execution time. If the task is not completed within the expected time, it will be made available for acquisition by other workers.
    # @param extension_id [String] The unique ID of the extension.
    # @param worker_name [String] The name of the worker that will process the task.
    # @param properties [V1AcquireDocumentVersionRequestProperties] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V1AcquiredDocumentVersion, Integer, Hash)>] V1AcquiredDocumentVersion data, response status code and response headers
    def a_pi_acquire_document_version_with_http_info(extension_id, worker_name, properties, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIApi.a_pi_acquire_document_version ...'
      end
      # verify the required parameter 'extension_id' is set
      if @api_client.config.client_side_validation && extension_id.nil?
        fail ArgumentError, "Missing the required parameter 'extension_id' when calling APIApi.a_pi_acquire_document_version"
      end
      # verify the required parameter 'worker_name' is set
      if @api_client.config.client_side_validation && worker_name.nil?
        fail ArgumentError, "Missing the required parameter 'worker_name' when calling APIApi.a_pi_acquire_document_version"
      end
      # verify the required parameter 'properties' is set
      if @api_client.config.client_side_validation && properties.nil?
        fail ArgumentError, "Missing the required parameter 'properties' when calling APIApi.a_pi_acquire_document_version"
      end
      # resource path
      local_var_path = '/v1/extensions/{extensionId}/documentVersionQueue/{workerName}/acquire'.sub('{' + 'extensionId' + '}', CGI.escape(extension_id.to_s)).sub('{' + 'workerName' + '}', CGI.escape(worker_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(properties)

      # return_type
      return_type = opts[:debug_return_type] || 'V1AcquiredDocumentVersion'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"APIApi.a_pi_acquire_document_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIApi#a_pi_acquire_document_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
    # @param extension_id [String] The unique ID of the extension.
    # @param worker_name [String] The name of the worker that processed the task.
    # @param document_version_id [String] The ID of the document version that was processed.
    # @param properties [V1CompleteDocumentVersionRequestProperties] 
    # @param [Hash] opts the optional parameters
    # @return [V1CompletedDocumentVersion]
    def a_pi_complete_document_version(extension_id, worker_name, document_version_id, properties, opts = {})
      data, _status_code, _headers = a_pi_complete_document_version_with_http_info(extension_id, worker_name, document_version_id, properties, opts)
      data
    end

    # Completes a DocumentVersion task. The task should be marked as complete after successful processing or if an error occurs during processing. If completed successfully, any extracted document attributes should be included in the completion request.
    # @param extension_id [String] The unique ID of the extension.
    # @param worker_name [String] The name of the worker that processed the task.
    # @param document_version_id [String] The ID of the document version that was processed.
    # @param properties [V1CompleteDocumentVersionRequestProperties] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V1CompletedDocumentVersion, Integer, Hash)>] V1CompletedDocumentVersion data, response status code and response headers
    def a_pi_complete_document_version_with_http_info(extension_id, worker_name, document_version_id, properties, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIApi.a_pi_complete_document_version ...'
      end
      # verify the required parameter 'extension_id' is set
      if @api_client.config.client_side_validation && extension_id.nil?
        fail ArgumentError, "Missing the required parameter 'extension_id' when calling APIApi.a_pi_complete_document_version"
      end
      # verify the required parameter 'worker_name' is set
      if @api_client.config.client_side_validation && worker_name.nil?
        fail ArgumentError, "Missing the required parameter 'worker_name' when calling APIApi.a_pi_complete_document_version"
      end
      # verify the required parameter 'document_version_id' is set
      if @api_client.config.client_side_validation && document_version_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_version_id' when calling APIApi.a_pi_complete_document_version"
      end
      # verify the required parameter 'properties' is set
      if @api_client.config.client_side_validation && properties.nil?
        fail ArgumentError, "Missing the required parameter 'properties' when calling APIApi.a_pi_complete_document_version"
      end
      # resource path
      local_var_path = '/v1/extensions/{extensionId}/documentVersionQueue/{workerName}/complete/{documentVersionId}'.sub('{' + 'extensionId' + '}', CGI.escape(extension_id.to_s)).sub('{' + 'workerName' + '}', CGI.escape(worker_name.to_s)).sub('{' + 'documentVersionId' + '}', CGI.escape(document_version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(properties)

      # return_type
      return_type = opts[:debug_return_type] || 'V1CompletedDocumentVersion'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"APIApi.a_pi_complete_document_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIApi#a_pi_complete_document_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed.
    # @param extension_id [String] The unique ID of the extension.
    # @param body [InlineObject] 
    # @param [Hash] opts the optional parameters
    # @return [V1DocumentVersion]
    def a_pi_create_document_version(extension_id, body, opts = {})
      data, _status_code, _headers = a_pi_create_document_version_with_http_info(extension_id, body, opts)
      data
    end

    # Creates a new DocumentVersion. The DocumentVersion represents a document from an external system that needs to be processed.
    # @param extension_id [String] The unique ID of the extension.
    # @param body [InlineObject] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V1DocumentVersion, Integer, Hash)>] V1DocumentVersion data, response status code and response headers
    def a_pi_create_document_version_with_http_info(extension_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIApi.a_pi_create_document_version ...'
      end
      # verify the required parameter 'extension_id' is set
      if @api_client.config.client_side_validation && extension_id.nil?
        fail ArgumentError, "Missing the required parameter 'extension_id' when calling APIApi.a_pi_create_document_version"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling APIApi.a_pi_create_document_version"
      end
      # resource path
      local_var_path = '/v1/extensions/{extensionId}/documentVersion'.sub('{' + 'extensionId' + '}', CGI.escape(extension_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V1DocumentVersion'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"APIApi.a_pi_create_document_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIApi#a_pi_create_document_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
